# -*- coding: utf-8 -*-
"""AR2_Document_FedFormer_Seed_Jesse_Price.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UhZFcSJP4D2HDvpwMmCkvg9cpZnXWxBe

# Imports
"""

!pip install arch

import seaborn as sns
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.stats import ttest_1samp
from scipy import stats

from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
import statsmodels.api as sm
from sklearn.model_selection import train_test_split
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf

import subprocess

import os
import shutil

import numpy as np
from scipy.fft import fft
from scipy.special import gamma, gammaln
from numpy import conj, sqrt
from statsmodels.tsa.ar_model import AutoReg

import numpy as np
import matplotlib.pyplot as plt
import statsmodels.api as sm
from statsmodels.tsa.stattools import adfuller, acf, pacf
from arch.unitroot import VarianceRatio
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error

"""# Set up Fedformer"""

!pip install -q transformers
!pip install -q datasets
!pip install -q evaluate
!pip install -q accelerate
!pip install -q gluonts ujson

!git clone https://github.com/jsedoc/FEDformer
!gdown --fuzzy https://drive.google.com/file/d/1alE33S1GmP5wACMXaLu50rDIoVzBM4ik/view?usp=drive_link

!cd /content/FEDFormer;git pull

!unzip all_six_datasets.zip

!sed -i 's/np\.Inf/np.inf/g' /content/FEDformer/utils/tools.py

def create_folder_ar2(phi1, phi2, sigma, n, seed):
    folder_name = f"ar2_{phi1}_{phi2}_{sigma}_{n}_{seed}_folder"
    os.makedirs(folder_name, exist_ok=True)
    return folder_name

def move_file_to_folder(filename, folder):
    if not os.path.exists(folder):
        print(f"Folder '{folder}' does not exist. Creating it now.")
        os.makedirs(folder)

    if os.path.exists(filename):
        shutil.move(filename, folder)
        print(f"Moved '{filename}' to '{folder}'.")
    else:
        print(f"File '{filename}' does not exist.")

# Function to simulate AR(2) process
def simulate_ar2(phi1, phi2, sigma, n, seed):
    np.random.seed(seed)  # For reproducibility

    noise = np.random.normal(0, sigma, n)
    series = np.zeros(n)

    # Start with arbitrary initial values (commonly zero or from stationary distribution)
    series[0] = noise[0]
    series[1] = phi1 * series[0] + noise[1]

    # Simulate AR(2)
    for t in range(2, n):
        series[t] = phi1 * series[t-1] + phi2 * series[t-2] + noise[t]

    return series

def add_date_column(file_name, freq='s'):
    df = pd.read_csv(file_name)
    n_samples = len(df)
    df['date'] = pd.date_range(start='2000-01-01', periods=n_samples, freq=freq)
    df.to_csv(file_name, index=False)
    print(f"Updated {file_name} with date column.")

def ar2_create_folder_simulate_split_save_to_csv(phi1, phi2, sigma, n, seed, freq='s'):
    folder = create_folder_ar2(phi1, phi2, sigma, n, seed)
    ar2_series = simulate_ar2(phi1, phi2, sigma, n, seed)
    train_size = int((2/3)*len(ar2_series))
    ar2_series_train = ar2_series[:train_size]
    ar2_series_test = ar2_series[train_size:]

    df_train = pd.DataFrame({'value': ar2_series_train})
    df_test = pd.DataFrame({'value': ar2_series_test})
    df = pd.DataFrame({'value': ar2_series})

    df_train.to_csv(f"{folder}/ar2_{phi1}_{phi2}_{sigma}_{n}_{seed}_train.csv", index=False)
    df_test.to_csv(f"{folder}/ar2_{phi1}_{phi2}_{sigma}_{n}_{seed}_test.csv", index=False)
    df.to_csv(f"{folder}/ar2_{phi1}_{phi2}_{sigma}_{n}_{seed}_data.csv", index=False)

    add_date_column(f"{folder}/ar2_{phi1}_{phi2}_{sigma}_{n}_{seed}_train.csv", freq='s')
    add_date_column(f"{folder}/ar2_{phi1}_{phi2}_{sigma}_{n}_{seed}_test.csv", freq='s')
    add_date_column(f"{folder}/ar2_{phi1}_{phi2}_{sigma}_{n}_{seed}_data.csv", freq='s')

def run_train_fedformer(modes, seq_len, label_len, pred_len, e_layers, d_layers, factor,
    enc_in, dec_in, c_out, d_model, train_epochs, seed,
    data_path,
    task_id
):

    # Prepare the command as a list
    command = [
        'python', '-u', 'run.py',
        '--is_training', '1',
        '--root_path', '/content/',
        '--data_path', str(data_path),
        '--task_id', str(task_id),
        '--model', 'FEDformer',
        '--mode_select', 'random',
        '--modes', str(modes),
        '--data', 'custom',
        '--features', 'S',
        '--seq_len', str(seq_len),
        '--label_len', str(label_len),
        '--pred_len', str(pred_len),
        '--e_layers', str(e_layers),
        '--d_layers', str(d_layers),
        '--factor', str(factor),
        '--enc_in', str(enc_in),
        '--dec_in', str(dec_in),
        '--c_out', str(c_out),
        '--des', 'Exp',
        '--d_model', str(d_model),
        '--itr', '1',
        '--freq', 's',
        '--target', 'value',
        '--train_epochs', str(train_epochs),
        '--seed', str(seed)
    ]

    try:
        result = subprocess.run(command, cwd = '/content/FEDformer', shell=False,  capture_output=True)
        print(result)
    except subprocess.CalledProcessError as e:
        print(f"Error running FEDformer: {e}")

def ar2_rename_checkpoint_file(phi1, phi2, sigma, n, seed, modes, seq_len, label_len, pred_len, e_layers, d_layers, factor,
    enc_in, dec_in, c_out, d_model, train_epochs, seed_fedformer, old_name, new_name):

    old_file_name = f"FEDformer/checkpoints/ar2_{phi1}_{phi2}_{sigma}_{n}_{seed}_{old_name}_FEDformer_random_modes{modes}_seed{seed_fedformer}_custom_ftS_sl{seq_len}_ll{label_len}_pl{pred_len}_dm{d_model}_nh8_el{e_layers}_dl{d_layers}_df2048_fc{factor}_ebtimeF_dtTrue_Exp_0"
    new_file_name = f"FEDformer/checkpoints/ar2_{phi1}_{phi2}_{sigma}_{n}_{seed}_{new_name}_FEDformer_custom_ftS_sl{seq_len}_ll{label_len}_pl{pred_len}_dm{d_model}_nh8_el{e_layers}_dl{d_layers}_df2048_fc{factor}_ebtimeF_dtTrue_Exp_0"

    os.rename(old_file_name, new_file_name)

    file_name_checkpoints = new_file_name + '/checkpoint.pth'

    return file_name_checkpoints

def run_test_fedformer( modes, seq_len, label_len, pred_len, e_layers, d_layers, factor,
    enc_in, dec_in, c_out, d_model, train_epochs, seed, file_name_checkpoints,
    data_path,
    task_id,
):
    # Prepare the command as a list
    command = [
        'python', '-u', 'run.py',
        '--is_training', '0',
        '--root_path', '/content/',
        '--data_path', str(data_path),
        '--task_id', str(task_id),
        '--model', 'FEDformer',
        '--mode_select', 'random',
        '--modes', str(modes),
        '--data', 'custom',
        '--features', 'S',
        '--seq_len', str(seq_len),
        '--label_len', str(label_len),
        '--pred_len', str(pred_len),
        '--e_layers', str(e_layers),
        '--d_layers', str(d_layers),
        '--factor', str(factor),
        '--enc_in', str(enc_in),
        '--dec_in', str(dec_in),
        '--c_out', str(c_out),
        '--des', 'Exp',
        '--d_model', str(d_model),
        '--itr', '1',
        '--freq', 's',
        '--target', 'value',
        '--train_epochs', str(train_epochs),
        '--seed', str(seed),
        '--checkpoints', str(file_name_checkpoints)
    ]

    try:
        result = subprocess.run(command, cwd = '/content/FEDformer', shell=False,  capture_output=True)
        print(result)
    except subprocess.CalledProcessError as e:
        print(f"Error running FEDformer: {e}")

def ar2_create_fedformer_file(phi1, phi2, sigma, n, seed, modes, seq_len, label_len, pred_len, e_layers, d_layers, factor,
    enc_in, dec_in, c_out, d_model, train_epochs, seed_fedformer, old_name, new_name):

    parent_folder = f"ar2_{phi1}_{phi2}_{sigma}_{n}_{seed}_folder"
    new_folder = os.path.join(parent_folder, f'ar2_{modes}_{seq_len}_{label_len}_{pred_len}_{e_layers}_{d_layers}_{factor}_{enc_in}_{dec_in}_{c_out}_{d_model}_{train_epochs}_{seed_fedformer}_{old_name}_{new_name}')
    os.makedirs(new_folder, exist_ok=True)

def ar2_move_fedformer_files(phi1, phi2, sigma, n, seed, modes, seq_len, label_len, pred_len, e_layers, d_layers, factor,
    enc_in, dec_in, c_out, d_model, train_epochs, seed_fedformer, old_name, new_name):
    destination_folder = f'ar2_{phi1}_{phi2}_{sigma}_{n}_{seed}_folder/ar2_{modes}_{seq_len}_{label_len}_{pred_len}_{e_layers}_{d_layers}_{factor}_{enc_in}_{dec_in}_{c_out}_{d_model}_{train_epochs}_{seed_fedformer}_{old_name}_{new_name}'
    files_to_move = [
        f"FEDformer/results/ar2_{phi1}_{phi2}_{sigma}_{n}_{seed}_test_FEDformer_custom_ftS_sl{seq_len}_ll{label_len}_pl{pred_len}_dm{d_model}_nh8_el{e_layers}_dl{d_layers}_df2048_fc{factor}_ebtimeF_dtTrue_Exp_0/metrics.npy",
        f"FEDformer/results/ar2_{phi1}_{phi2}_{sigma}_{n}_{seed}_test_FEDformer_custom_ftS_sl{seq_len}_ll{label_len}_pl{pred_len}_dm{d_model}_nh8_el{e_layers}_dl{d_layers}_df2048_fc{factor}_ebtimeF_dtTrue_Exp_0/pred.npy",
        f"FEDformer/results/ar2_{phi1}_{phi2}_{sigma}_{n}_{seed}_test_FEDformer_custom_ftS_sl{seq_len}_ll{label_len}_pl{pred_len}_dm{d_model}_nh8_el{e_layers}_dl{d_layers}_df2048_fc{factor}_ebtimeF_dtTrue_Exp_0/true.npy",
        f"FEDformer/test_results/ar2_{phi1}_{phi2}_{sigma}_{n}_{seed}_test_FEDformer_custom_ftS_sl{seq_len}_ll{label_len}_pl{pred_len}_dm{d_model}_nh8_el{e_layers}_dl{d_layers}_df2048_fc{factor}_ebtimeF_dtTrue_Exp_0/0.pdf",
        f"FEDformer/checkpoints/ar2_{phi1}_{phi2}_{sigma}_{n}_{seed}_test_FEDformer_custom_ftS_sl{seq_len}_ll{label_len}_pl{pred_len}_dm{d_model}_nh8_el{e_layers}_dl{d_layers}_df2048_fc{factor}_ebtimeF_dtTrue_Exp_0/checkpoint.pth"
    ]
    for file_path in files_to_move:
      file_name = os.path.basename(file_path)
      new_path = os.path.join(destination_folder, file_name)
      shutil.move(file_path, new_path)
      print(f'Moved {file_name} to {destination_folder}')

def ar2_fedformer_train_test(phi1, phi2, sigma, n, seed, modes, seq_len, label_len, pred_len, e_layers, d_layers, factor,
    enc_in, dec_in, c_out, d_model, train_epochs, seed_fedformer, old_name, new_name):

    run_train_fedformer(modes, seq_len, label_len, pred_len, e_layers, d_layers, factor,
    enc_in, dec_in, c_out, d_model, train_epochs, seed_fedformer,
    data_path=f'ar2_{phi1}_{phi2}_{sigma}_{n}_{seed}_folder/ar2_{phi1}_{phi2}_{sigma}_{n}_{seed}_{old_name}.csv',
    task_id=f'ar2_{phi1}_{phi2}_{sigma}_{n}_{seed}_{old_name}'
)

    file_name_checkpoints = ar2_rename_checkpoint_file(phi1, phi2, sigma, n, seed, modes, seq_len, label_len, pred_len, e_layers, d_layers, factor,
    enc_in, dec_in, c_out, d_model, train_epochs, seed_fedformer, old_name, new_name)

    run_test_fedformer( modes, seq_len, label_len, pred_len, e_layers, d_layers, factor,
    enc_in, dec_in, c_out, d_model, train_epochs, seed_fedformer,  file_name_checkpoints,
    data_path=f'ar2_{phi1}_{phi2}_{sigma}_{n}_{seed}_folder/ar2_{phi1}_{phi2}_{sigma}_{n}_{seed}_{new_name}.csv',
    task_id=f'ar2_{phi1}_{phi2}_{sigma}_{n}_{seed}_{new_name}'
)

    ar2_create_fedformer_file(phi1, phi2, sigma, n, seed, modes, seq_len, label_len, pred_len, e_layers, d_layers, factor,
    enc_in, dec_in, c_out, d_model, train_epochs, seed_fedformer, old_name, new_name)

    ar2_move_fedformer_files(phi1, phi2, sigma, n, seed, modes, seq_len, label_len, pred_len, e_layers, d_layers, factor,
    enc_in, dec_in, c_out, d_model, train_epochs, seed_fedformer, old_name, new_name)

import numpy as np

def get_ar2_forecasts(true_data, start_idx, testing_sample_size, phi1, phi2):
    """
    Generates one-step ahead forecasts for an AR(2) model.

    Args:
        true_data (array-like): The time series data.
        start_idx (int): The starting index for forecasting.
        testing_sample_size (int): The number of samples for testing.
        phi1 (float): The coefficient for lag-1.
        phi2 (float): The coefficient for lag-2.

    Returns:
        array-like: The simulated AR(2) forecasts.
    """

    # Initialize the list to store forecasts
    simulated_data = []

    # Generate one-step ahead forecasts using the AR(2) formula
    for t in range(start_idx, start_idx + testing_sample_size):
        forecast = phi1 * true_data[t-1] + phi2 * true_data[t-2]  # AR(2) equation
        simulated_data.append(forecast)

    return np.array(simulated_data)  # Return forecasts directly

def integer_always_round_down(value):
    return int(value // 1)

def ar2_true_v_fed_plot(phi1, phi2, sigma, n, seed, modes, seq_len, label_len, pred_len, e_layers, d_layers, factor,
    enc_in, dec_in, c_out, d_model, train_epochs, seed_fedformer, old_name, new_name):

    pred_folder = (f'ar2_{phi1}_{phi2}_{sigma}_{n}_{seed}_folder/ar2_{modes}_{seq_len}_{label_len}_{pred_len}_{e_layers}_{d_layers}_{factor}_{enc_in}_{dec_in}_{c_out}_{d_model}_{train_epochs}_{seed_fedformer}_{old_name}_{new_name}/pred.npy')
    true_folder = f'ar2_{phi1}_{phi2}_{sigma}_{n}_{seed}_folder/ar2_{phi1}_{phi2}_{sigma}_{n}_{seed}_test.csv'

    # Load prediction and true data
    pred_data = np.load(pred_folder)
    pred_data = pred_data.reshape(-1)

    true_df = pd.read_csv(true_folder)
    true_data = true_df.iloc[:,0].values

    # Compute testing sample size
    testing_sample_size = integer_always_round_down((n * (1/3) * 0.2) // 32) * 32
    start_idx = int(n * (1/3) - n * (1/3) * 0.2)
    true_data_compare = true_data[start_idx: start_idx + testing_sample_size]

    ar2_theoretical = get_ar2_forecasts(true_data, start_idx, testing_sample_size, phi1, phi2)
    df = pd.DataFrame(ar2_theoretical)
    df.to_csv(f'ar2_{phi1}_{phi2}_{sigma}_{n}_{seed}_folder/ar2_{modes}_{seq_len}_{label_len}_{pred_len}_{e_layers}_{d_layers}_{factor}_{enc_in}_{dec_in}_{c_out}_{d_model}_{train_epochs}_{seed_fedformer}_{old_name}_{new_name}/ar2_theoretical' + ".csv", index=False)

    mse_real_v_fed = mean_squared_error(true_data_compare, pred_data)
    print(f"Mean Squared Error of Fedformer Forecasts: {mse_real_v_fed:.6f}")

    mse_real_v_theoretical = mean_squared_error(true_data_compare, ar2_theoretical)
    print(f"Mean Squared Error of ARIMA (AR_2) Forecasts: {mse_real_v_theoretical:.6f}")

    print(f"Ratio of Mean Squared Error of ARIMA (AR_2) Forecasts to FedFormer Forecasts : {mse_real_v_theoretical/mse_real_v_fed}")

    mae = mean_absolute_error(true_data_compare, pred_data)
    rmse = np.sqrt(mean_squared_error(true_data_compare, pred_data))
    r_squared = r2_score(true_data_compare, pred_data)
    print(f"Real v. Fedformer: MAE: {mae:.6f}, RMSE: {rmse:.6f}, R-squared: {r_squared:.6f}")

    print("Ljung Box: True v. FED")
    error_true_fed = true_data_compare - pred_data
    ljung_box_result = sm.stats.acorr_ljungbox(error_true_fed, lags=10)
    print(ljung_box_result)

    print("Ljung Box: True v. Theoretical")
    error_true_theoretical = true_data_compare - ar2_theoretical
    ljung_box_result = sm.stats.acorr_ljungbox(error_true_theoretical, lags=10)
    print(ljung_box_result)

    # Creating a DataFrame
    data = pd.DataFrame({
        'Error Type': ['FED'] * len(error_true_fed) + ['Theoretical'] * len(error_true_theoretical),
        'Error Value': np.concatenate([error_true_fed, error_true_theoretical])
    })

    # Plotting
    plt.figure(figsize=(8, 5))
    sns.boxplot(x='Error Type', y='Error Value', data=data, palette='Set2')
    plt.title('Boxplots of True Errors for FED and Theoretical Models')
    plt.xlabel('Model')
    plt.ylabel('Error')
    plt.grid(True)
    plt.show()

    # Creating a DataFrame
    data = pd.DataFrame({
        'Error Type': ['FED'] * len(error_true_fed) + ['Theoretical'] * len(error_true_theoretical),
        'Error Value': np.concatenate([np.abs(error_true_fed), np.abs(error_true_theoretical)])
    })

    # Plotting
    plt.figure(figsize=(8, 5))
    sns.boxplot(x='Error Type', y='Error Value', data=data, palette='Set2')
    plt.title('Boxplots of True Errors for FED and Theoretical Models')
    plt.xlabel('Model')
    plt.ylabel('Error')
    plt.grid(True)
    plt.show()

    plt.figure(figsize=(8, 6))
    sns.kdeplot(error_true_fed, label="True v. FED", shade=True)
    sns.kdeplot(error_true_theoretical, label="True v. Theoretical", shade=True)
    plt.title("Error Distribution Comparison")
    plt.xlabel("Error Value")
    plt.ylabel("Density")
    plt.legend()
    plt.show()

    import scipy.stats as stats
    # Compute absolute difference
    diff = np.abs(error_true_theoretical - error_true_fed)

    # Conduct one-sample t-test (testing if the mean difference is significantly different from zero)
    t_stat, p_value = stats.ttest_1samp(diff, 0)

    # Print results
    print(f"Mean Absolute Difference: {np.mean(diff)}")
    print(f"T-Statistic: {t_stat}")
    print(f"P-Value: {p_value}")
    print(f'Standard Deviation of the Absolute Differences: {np.std(diff)}')

    fig, axes = plt.subplots(5, 2, figsize=(12, 8))

    # Plot ACF and PACF for pred_data
    plot_acf(pred_data, lags=20, ax=axes[0, 0], zero=False)
    axes[0, 0].set_title('ACF for pred_data')

    plot_pacf(pred_data, lags=20, ax=axes[0, 1], zero=False)
    axes[0, 1].set_title('PACF for pred_data')

    plot_acf(ar2_theoretical, lags=20, ax=axes[1,0], zero=False)
    axes[1,0].set_title("ACF for ar2_theoretical")

    plot_pacf(ar2_theoretical, lags=20, ax=axes[1,1], zero=False)
    axes[1,1].set_title("PACF for ar2_theoretical")

    plot_acf(error_true_fed, lags=20, ax=axes[2,0], zero=False)
    axes[2,0].set_title("ACF for error_true_fed")

    plot_pacf(error_true_fed, lags=20, ax=axes[2,1], zero=False)
    axes[2,1].set_title("PACF for error_true_fed")

    plot_acf(error_true_theoretical, lags=20, ax=axes[3,0], zero=False)
    axes[3,0].set_title("ACF for error_true_theoretical")

    plot_pacf(error_true_theoretical, lags=20, ax=axes[3,1], zero=False)
    axes[3,1].set_title("PACF for error_true_theoretical")

    plot_acf(true_data_compare, lags=20, ax=axes[4,0], zero=False)
    axes[4,0].set_title("ACF for true_data_compare")

    plot_pacf(true_data_compare, lags=20, ax=axes[4,1], zero=False)
    axes[4,1].set_title("PACF for true_data_compare")

    # Adjust layout and show the plot
    plt.tight_layout()
    plt.show()

    # Assuming true_data_compare and pred_data are NumPy arrays of the same size
    X = sm.add_constant(pred_data)  # Adding intercept term
    y = true_data_compare

    # Fit Ordinary Least Squares (OLS) regression
    model = sm.OLS(y, X).fit()
    print("TRUE v. FEDFORMER")
    print(model.summary())

    # Plot the regression line
    plt.figure(figsize=(8, 6))
    plt.scatter(pred_data, true_data_compare, label="Data", color='blue', alpha=0.6)
    plt.plot(pred_data, model.fittedvalues, color='red', label="Regression Line")
    plt.xlabel("Fedformer AR(2) Values")
    plt.ylabel("True Data Values")
    plt.title("Regression Line: TRUE vs. FEDFormer")
    plt.legend()
    plt.show()

    # Assuming true_data_compare and pred_data are NumPy arrays of the same size
    X = sm.add_constant(ar2_theoretical)  # Adding intercept term
    y = true_data_compare

    # Fit Ordinary Least Squares (OLS) regression
    model = sm.OLS(y, X).fit()
    print("TRUE v. THEORETICAL")
    print(model.summary())

    # Plot the regression line
    plt.figure(figsize=(8, 6))
    plt.scatter(ar2_theoretical, true_data_compare, label="Data", color='blue', alpha=0.6)
    plt.plot(ar2_theoretical, model.fittedvalues, color='red', label="Regression Line")
    plt.xlabel("Theoretical AR(2) Values")
    plt.ylabel("True Data Values")
    plt.title("Regression Line: TRUE vs. THEORETICAL")
    plt.legend()
    plt.show()

    # Assuming true_data_compare and pred_data are NumPy arrays of the same size
    X = sm.add_constant(pred_data)  # Adding intercept term
    y = ar2_theoretical

    # Fit Ordinary Least Squares (OLS) regression
    model = sm.OLS(y, X).fit()
    print("THEORETICAL v. FEDFORMER")
    print(model.summary())

    # Plot the regression line
    plt.figure(figsize=(8, 6))
    plt.scatter(pred_data, ar2_theoretical, label="Data", color='blue', alpha=0.6)
    plt.plot(pred_data, model.fittedvalues, color='red', label="Regression Line")
    plt.xlabel("Fedformer AR(2) Values")
    plt.ylabel("Theoretical Data Values")
    plt.title("Regression Line: THEORETIAL vs. FEDFORMER")
    plt.legend()
    plt.show()

    # Plot the comparison
    plt.figure(figsize=(10, 5))
    plt.plot(true_data_compare, label='True Data', linestyle='dashed')
    plt.plot(pred_data, label='Predicted Data', alpha=0.7)
    plt.plot(ar2_theoretical, label='Theoretical Data')
    plt.xlabel('Time Steps')
    plt.ylabel('Value')
    plt.title('Comparison of True and Predicted Data')
    plt.legend()
    plt.show()

# EPOCHS CHANGED TO 3 and SEED and FEDFORMER SEED to 53
n = 3000
seed = 52

modes = 64
seq_len = 96
label_len = 0
pred_len = 1
e_layers = 2
d_layers = 1
factor = 3
enc_in = 1
dec_in = 1
c_out = 1
d_model = 128
train_epochs = 1
seed_fedformer = 42
old_name = 'train'
new_name = 'test'

for seed_fedformer in [43,44,45,46,47]:
  for phi1 in [-0.5,0.5]:
    for phi2 in [-0.4,0.4]:
      for sigma in [0.1,0.5,1,2]:

        ar2_create_folder_simulate_split_save_to_csv(phi1, phi2, sigma, n, seed)

        ar2_fedformer_train_test(phi1, phi2, sigma, n, seed, modes, seq_len, label_len, pred_len, e_layers, d_layers, factor,
        enc_in, dec_in, c_out, d_model, train_epochs, seed_fedformer, old_name, new_name)

from google.colab import files
!zip -r ar2_variance_check_og_params_fedformer_seed_folders.zip ar2*_folder
files.download("ar2_variance_check_og_params_fedformer_seed_folders.zip")

from google.colab import files
uploaded = files.upload()  # upload ar1_all_folders.zip when prompted
!unzip ar1_all_folders.zip

for phi1 in [-0.5,0.5]:
  for phi2 in [-0.4,0.4]:
    for sigma in [0.1,0.5,1,2]:
      ar2_true_v_fed_plot(phi1, phi2, sigma, n, seed, modes, seq_len, label_len, pred_len, e_layers, d_layers, factor,
      enc_in, dec_in, c_out, d_model, train_epochs, seed_fedformer, old_name, new_name)

"""Official Params"""

n = 3000
seed = 52

modes = 64
seq_len = 96
label_len = 0 --> 48
pred_len = 1 --> 96
e_layers = 2
d_layers = 1
factor = 3 --> 1
enc_in = 1 --> 7
dec_in = 1 --> 7
c_out = 1 --> 7
d_model = 128 --> 512
train_epochs = 1 --> 10
seed_fedformer = 42 --> 2021
old_name = 'train'
new_name = 'test'