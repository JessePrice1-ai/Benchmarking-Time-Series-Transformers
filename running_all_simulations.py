# -*- coding: utf-8 -*-
"""Running All Simulations

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qCdnUjbE3S3WCoSRZUgsBZAxTr8uMNcB
"""

!pip install arch
import seaborn as sns
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.stats import ttest_1samp
from scipy import stats

from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
import statsmodels.api as sm
from sklearn.model_selection import train_test_split
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf

import subprocess

import os
import shutil

import numpy as np
from scipy.fft import fft
from scipy.special import gamma, gammaln
from numpy import conj, sqrt
from statsmodels.tsa.ar_model import AutoReg

import numpy as np
import matplotlib.pyplot as plt
import statsmodels.api as sm
from statsmodels.tsa.stattools import adfuller, acf, pacf
from arch.unitroot import VarianceRatio
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error

def get_ar1_forecasts(true_data, start_idx, testing_sample_size, phi):
    """
    Generates 192 one-step ahead forecasts for AR(1) model.

    Args:
        true_data (array-like): The full time series.
        start_idx (int): The index of the first value to use for forecasting.
        testing_sample_size (int): Number of one-step ahead forecasts to make.
        phi (float): AR(1) coefficient.

    Returns:
        np.array: 192 one-step ahead forecasts.
    """
    forecasts = []
    for t in range(start_idx, start_idx + testing_sample_size):
        y_prev = true_data[t - 1]
        forecasts.append(phi * y_prev)

    return np.array(forecasts)

import numpy as np

def get_ar2_forecasts(true_data, start_idx, testing_sample_size, phi1, phi2):
    """
    Generates one-step ahead forecasts for an AR(2) model.

    Args:
        true_data (array-like): The time series data.
        start_idx (int): The starting index for forecasting.
        testing_sample_size (int): The number of samples for testing.
        phi1 (float): The coefficient for lag-1.
        phi2 (float): The coefficient for lag-2.

    Returns:
        array-like: The simulated AR(2) forecasts.
    """

    # Initialize the list to store forecasts
    simulated_data = []

    # Generate one-step ahead forecasts using the AR(2) formula
    for t in range(start_idx, start_idx + testing_sample_size):
        forecast = phi1 * true_data[t-1] + phi2 * true_data[t-2]  # AR(2) equation
        simulated_data.append(forecast)

    return np.array(simulated_data)  # Return forecasts directly

import numpy as np

def get_white_noise_forecasts(true_data, start_idx, testing_sample_size, sigma):
    """
    Generates one-step ahead white noise forecasts.

    Args:
        true_data (array-like): The time series data (although not really used for generating white noise, we need it for the structure).
        start_idx (int): The starting index for forecasting.
        testing_sample_size (int): The number of samples for testing.
        sigma (float): The standard deviation of the white noise.

    Returns:
        array-like: The simulated white noise forecasts.
    """

    # Generate white noise values
    white_noise = np.zeros(testing_sample_size)

    return white_noise

def integer_always_round_down(value):
    return int(value // 1)

def ar1_true_v_fed_plot(phi, sigma, n, seed, modes, seq_len, label_len, pred_len, e_layers, d_layers, factor,
    enc_in, dec_in, c_out, d_model, train_epochs, seed_fedformer, old_name, new_name):
    import numpy as np
    import scipy.stats as stats

    filepath = f'ar1_{phi}_{sigma}_{n}_{seed}_folder/ar1_{modes}_{seq_len}_{label_len}_{pred_len}_{e_layers}_{d_layers}_{factor}_{enc_in}_{dec_in}_{c_out}_{d_model}_{train_epochs}_{seed_fedformer}_{old_name}_{new_name}/'

    pred_folder = (f'ar1_{phi}_{sigma}_{n}_{seed}_folder/ar1_{modes}_{seq_len}_{label_len}_{pred_len}_{e_layers}_{d_layers}_{factor}_{enc_in}_{dec_in}_{c_out}_{d_model}_{train_epochs}_{seed_fedformer}_{old_name}_{new_name}/pred.npy')
    true_folder = f'ar1_{phi}_{sigma}_{n}_{seed}_folder/ar1_{phi}_{sigma}_{n}_{seed}_data.csv'

    print(f"------------------------------------------------------------Phi {phi} Sigma {sigma} n {n} seed {seed}----------------------------------------------- ")

    # Load prediction and true data
    pred_data = np.load(pred_folder)
    pred_data = pred_data.reshape(-1)

    true_df = pd.read_csv(true_folder)
    true_data = true_df.iloc[:,0].values

    data_train = true_data[:int(n*(2/3))]
    data_train_to_scale = data_train[:int(n*(2/3)*0.7)]
    from sklearn.preprocessing import StandardScaler
    scaler = StandardScaler()
    scaler.fit(data_train_to_scale.reshape(-1,1))

    data_test = true_data[int(n*(2/3)):]

    print("len of test data should be 1000," , len(data_test))


    # Compute testing sample size
    testing_sample_size = integer_always_round_down((n * (1/3) * 0.2) // 32) * 32
    start_idx = int(n * (1/3) - n * (1/3) * 0.2)

    true_data_compare = data_test[start_idx: start_idx + testing_sample_size]

    pred_data = scaler.inverse_transform(pred_data.reshape(-1,1))

    ar1_theoretical = get_ar1_forecasts(data_test, start_idx, testing_sample_size, phi)
    df = pd.DataFrame(ar1_theoretical)
    df.to_csv(f'ar1_{phi}_{sigma}_{n}_{seed}_folder/ar1_{modes}_{seq_len}_{label_len}_{pred_len}_{e_layers}_{d_layers}_{factor}_{enc_in}_{dec_in}_{c_out}_{d_model}_{train_epochs}_{seed_fedformer}_{old_name}_{new_name}/ar1_theoretical' + ".csv", index=False)



    true_data_compare = true_data_compare.reshape(-1)
    ar1_theoretical = ar1_theoretical.reshape(-1)
    pred_data = pred_data.reshape(-1)


    print("------------------------------------------------------------MSE Analysis----------------------------------------------- ")

    mse_real_v_fed = mean_squared_error(true_data_compare, pred_data)
    errors = true_data_compare - pred_data
    squared_errors = errors ** 2
    mse_check = np.mean(squared_errors)
    mse_real_v_theoretical = mean_squared_error(true_data_compare, ar1_theoretical)
    mse_ratio = mse_real_v_theoretical/mse_real_v_fed

    print(f"Mean Squared Error of Fedformer Forecasts: {mse_real_v_fed:.6f}")
    print(f"Mean Squared Error of Fedformer Forecasts (Check should be the same): {mse_check:.6f}")
    print(f"Mean Squared Error of Optimal ARIMA Forecasts: {mse_real_v_theoretical:.6f}")
    print(f"Ratio of Mean Squared Error of Optimal ARIMA Forecasts to Mean Squared Error of FedFormer Forecasts: {mse_real_v_theoretical/mse_real_v_fed}")

    filepath_mse = filepath + 'mse.txt'

    # Writing results to file
    with open(filepath_mse, "w") as f:
        f.write(f"Mean Squared Error of Fedformer Forecasts: {mse_real_v_fed:.6f}\n")
        f.write(f"Mean Squared Error of Fedformer Forecasts (Check should be the same): {mse_check:.6f}\n")
        f.write(f"Mean Squared Error of Optimal ARIMA Forecasts: {mse_real_v_theoretical:.6f}\n")
        f.write(f"Ratio of Mean Squared Error of Optimal ARIMA Forecasts to FedFormer Forecasts: {mse_ratio:.6f}\n")

    print("------------------------------------------------------------Ljung Box----------------------------------------------- ")

    filepath_ljung_box = filepath + 'ljung_box.txt'

    print("Ljung Box: FedFormer Forecast Errors")
    error_true_fed = true_data_compare - pred_data
    ljung_box_fed = sm.stats.acorr_ljungbox(error_true_fed, lags=10)
    print(ljung_box_fed)

    print("Ljung Box: ARIMA Forecast Errors")
    error_true_theoretical = true_data_compare - ar1_theoretical
    ljung_box_arima = sm.stats.acorr_ljungbox(error_true_theoretical, lags=10)
    print(ljung_box_arima)

    print("------------------------------------------------------------Checking Ljung Box, Actual Data, Optimal ARIMA, Error of ARIMA Forecasts----------------------------------------------- ")

    from statsmodels.graphics.tsaplots import plot_pacf

    plot_pacf(true_data_compare, lags=20, zero=False)
    plt.show()

    plot_pacf(ar1_theoretical, lags=20, zero=False)
    plt.show()

    plot_pacf(error_true_theoretical, lags=20, zero=False)
    plt.show()

    # --- Save 10th lag values to file ---
    with open(filepath_ljung_box, 'w') as f:
      f.write("Ljung-Box Test Results (10th Lag)\n")
      f.write("------------------------------------------------\n")
      f.write("FedFormer:\n")
      f.write(f"LB Stat: {ljung_box_fed['lb_stat'].iloc[-1]:.4f}, p-value: {ljung_box_fed['lb_pvalue'].iloc[-1]:.4f}\n")
      f.write("ARIMA:\n")
      f.write(f"LB Stat: {ljung_box_arima['lb_stat'].iloc[-1]:.4f}, p-value: {ljung_box_arima['lb_pvalue'].iloc[-1]:.4f}\n")

    print("------------------------------------------------------------Box Plots + Error Distribution-----------------------------------------------")

    filepath_box_plots_error_distribution = filepath + 'box_plots_error_distribution.png'


    # Prepare the DataFrame
    data = pd.DataFrame({
        'Error Type': ['FedFormer'] * len(error_true_fed) + ['ARIMA'] * len(error_true_theoretical),
        'Error Value': np.concatenate([error_true_fed, error_true_theoretical])
    })

    # Create side-by-side subplots
    fig, axes = plt.subplots(1, 2, figsize=(14, 5))

    # --- Boxplot ---
    sns.boxplot(x='Error Type', y='Error Value', data=data, palette='Set2', ax=axes[0])
    axes[0].set_title('Boxplots of Forecast Errors')
    axes[0].set_xlabel('Model')
    axes[0].set_ylabel('Error')
    axes[0].grid(True)

    # --- KDE Plot ---
    sns.kdeplot(error_true_fed, label="FedFormer", fill=True, ax=axes[1])
    sns.kdeplot(error_true_theoretical, label="ARIMA", fill=True, ax=axes[1])
    axes[1].set_title("Error Distribution Comparison")
    axes[1].set_xlabel("Error Value")
    axes[1].set_ylabel("Density")
    axes[1].legend()
    axes[1].grid(True)
    plt.tight_layout()
    plt.savefig(filepath_box_plots_error_distribution, dpi=300)
    plt.show()

    print("------------------------------------------------------------Error Distribution of Differences between Absolute and Squared Errors for FedFormer and Optimal ARIMA-----------------------------------------------")


    import numpy as np
    from scipy import stats

    filepath_box_plots_error_distribution_of_differences = filepath + 'box_plots_error_distribution_of_differences.png'

    # Calculate differences
    abs_diff = np.abs(error_true_fed) - np.abs(error_true_theoretical)
    squared_diff = (error_true_fed)**2 - (error_true_theoretical)**2

    # Create DataFrames for plotting
    abs_diff_df = pd.DataFrame({
        'Error Value': abs_diff,
        'Error Type': ['FedFormer - ARIMA'] * len(abs_diff)
    })

    squared_diff_df = pd.DataFrame({
        'Error Value': squared_diff,
        'Error Type': ['FedFormer - ARIMA'] * len(squared_diff)
    })

    # Create 2x2 plot grid
    fig, axes = plt.subplots(2, 2, figsize=(14, 10))

    # --- Top Left: Boxplot of Absolute Error Differences ---
    sns.boxplot(x='Error Type', y='Error Value', data=abs_diff_df, palette='Set2', ax=axes[0, 0])
    axes[0, 0].set_title('Boxplot: |FedFormer| - |ARIMA|')
    axes[0, 0].set_xlabel('Model Comparison')
    axes[0, 0].set_ylabel('Error Difference')
    axes[0, 0].grid(True)

    # --- Top Right: KDE of Absolute Error Differences ---
    sns.kdeplot(abs_diff, label="Absolute Error Difference", fill=True, ax=axes[0, 1])
    axes[0, 1].set_title('Distribution: |FedFormer| - |ARIMA|')
    axes[0, 1].set_xlabel('Error Difference')
    axes[0, 1].set_ylabel('Density')
    axes[0, 1].legend()
    axes[0, 1].grid(True)

    # --- Bottom Left: Boxplot of Squared Error Differences ---
    sns.boxplot(x='Error Type', y='Error Value', data=squared_diff_df, palette='Set2', ax=axes[1, 0])
    axes[1, 0].set_title('Boxplot: FedFormer² - ARIMA²')
    axes[1, 0].set_xlabel('Model Comparison')
    axes[1, 0].set_ylabel('Error Difference')
    axes[1, 0].grid(True)

    # --- Bottom Right: KDE of Squared Error Differences ---
    sns.kdeplot(squared_diff, label="Squared Error Difference", fill=True, ax=axes[1, 1])
    axes[1, 1].set_title('Distribution: FedFormer² - ARIMA²')
    axes[1, 1].set_xlabel('Error Difference')
    axes[1, 1].set_ylabel('Density')
    axes[1, 1].legend()
    axes[1, 1].grid(True)

    # Tidy layout and show
    plt.tight_layout()
    plt.savefig(filepath_box_plots_error_distribution_of_differences, dpi=300)
    plt.show()

    print("------------------------------------------------------------Hypothesis Tests-----------------------------------------------")


    filepath_hypothesis_tests = filepath + 'hypothesis_tests.txt'

    print(f"Mean of Difference Between Absolute Fedformer Forecasts Errors and Absolute Optimal ARIMA Forecast Errors: {np.mean(abs_diff)}")
    print(f'Standard Deviation of the Difference Between Absolute Fedformer Forecasts Errors and Absolute Optimal ARIMA Forecast Errors: {np.std(abs_diff)}')

    abs_t_stat, abs_p_value = stats.ttest_1samp(abs_diff, 0.0)
    print(f"\nt = {abs_t_stat:.4f},  p = {abs_p_value:.4f}")


    print(f"Mean of Difference Between Squared Fedformer Forecasts Errors and Squared Optimal ARIMA Forecast Errors: {np.mean(squared_diff)}")
    print(f'Standard Deviation of the Difference Between Squared Fedformer Forecasts Errors and Squared Optimal ARIMA Forecast Errors: {np.std(squared_diff)}')

    squared_t_stat, squared_p_value = stats.ttest_1samp(squared_diff, 0.0)
    print(f"\nt = {squared_t_stat:.4f},  p = {squared_p_value:.4f}")

    # Calculate stats
    abs_mean = np.mean(abs_diff)
    abs_std = np.std(abs_diff)
    abs_t_stat, abs_p_value = stats.ttest_1samp(abs_diff, 0.0)

    squared_mean = np.mean(squared_diff)
    squared_std = np.std(squared_diff)
    squared_t_stat, squared_p_value = stats.ttest_1samp(squared_diff, 0.0)

    # Write to file
    with open(filepath_hypothesis_tests, 'w') as f:
        f.write("Hypothesis Test Results: FedFormer vs Optimal ARIMA\n")
        f.write("====================================================\n\n")

        f.write("1. Absolute Error Difference (|FedFormer| - |ARIMA|)\n")
        f.write(f"Mean: {abs_mean:.6f}\n")
        f.write(f"Standard Deviation: {abs_std:.6f}\n")
        f.write(f"t-statistic: {abs_t_stat:.4f}\n")
        f.write(f"p-value: {abs_p_value:.4f}\n\n")

        f.write("2. Squared Error Difference (FedFormer² - ARIMA²)\n")
        f.write(f"Mean: {squared_mean:.6f}\n")
        f.write(f"Standard Deviation: {squared_std:.6f}\n")
        f.write(f"t-statistic: {squared_t_stat:.4f}\n")
        f.write(f"p-value: {squared_p_value:.4f}\n")

    print("------------------------------------------------------------ACF and PACF Plots-----------------------------------------------")

    filepath_acf_pacf_plots = filepath + 'acf_pacf_plots.png'

    # Set up subplots: 5 rows, 2 columns
    fig, axes = plt.subplots(5, 2, figsize=(12, 10))

    # Row 1: Actual Data
    plot_acf(true_data_compare, lags=20, ax=axes[0, 0], zero=False)
    axes[0, 0].set_title("ACF for Actual Data")
    plot_pacf(true_data_compare, lags=20, ax=axes[0, 1], zero=False)
    axes[0, 1].set_title("PACF for Actual Data")

    # Row 2: FedFormer Predictions
    plot_acf(pred_data, lags=20, ax=axes[1, 0], zero=False)
    axes[1, 0].set_title("ACF for FedFormer Predictions")
    plot_pacf(pred_data, lags=20, ax=axes[1, 1], zero=False)
    axes[1, 1].set_title("PACF for FedFormer Predictions")

    # Row 3: Optimal ARIMA Predictions
    plot_acf(ar1_theoretical, lags=20, ax=axes[2, 0], zero=False)
    axes[2, 0].set_title("ACF for ARIMA Predictions")
    plot_pacf(ar1_theoretical, lags=20, ax=axes[2, 1], zero=False)
    axes[2, 1].set_title("PACF for ARIMA Predictions")

    # Row 4: FedFormer Forecast Errors
    plot_acf(error_true_fed, lags=20, ax=axes[3, 0], zero=False)
    axes[3, 0].set_title("ACF of FedFormer Forecast Errors")
    plot_pacf(error_true_fed, lags=20, ax=axes[3, 1], zero=False)
    axes[3, 1].set_title("PACF of FedFormer Forecast Errors")

    # Row 5: ARIMA Forecast Errors
    plot_acf(error_true_theoretical, lags=20, ax=axes[4, 0], zero=False)
    axes[4, 0].set_title("ACF of ARIMA Forecast Errors")
    plot_pacf(error_true_theoretical, lags=20, ax=axes[4, 1], zero=False)
    axes[4, 1].set_title("PACF of ARIMA Forecast Errors")

    # Adjust layout and show the plot
    plt.tight_layout()
    plt.savefig(filepath_acf_pacf_plots, dpi=300)
    plt.show()

    print("------------------------------------------------------------Regression Analysis-----------------------------------------------")

    filepath_regression_summary = filepath + 'regression_summary.txt'

    with open(filepath_regression_summary, 'w') as f:
        f.write("Regression Summary: FedFormer and ARIMA Forecast Comparison\n")
        f.write("============================================================\n\n")

        # 1. Actual Data vs. FedFormer Forecasts
        X = sm.add_constant(pred_data)
        y = true_data_compare
        model = sm.OLS(y, X).fit()

        f.write("1. Actual Data vs. FedFormer Forecasts\n")
        f.write(f"R-squared: {model.rsquared:.4f}\n")
        f.write(f"Intercept: {model.params[0]:.6f}, p-value: {model.pvalues[0]:.4e}\n")
        f.write(f"Slope:     {model.params[1]:.6f}, p-value: {model.pvalues[1]:.4e}\n\n")

        # 2. Actual Data vs. ARIMA Forecasts
        X = sm.add_constant(ar1_theoretical)
        y = true_data_compare
        model = sm.OLS(y, X).fit()

        f.write("2. Actual Data vs. Optimal ARIMA Forecasts\n")
        f.write(f"R-squared: {model.rsquared:.4f}\n")
        f.write(f"Intercept: {model.params[0]:.6f}, p-value: {model.pvalues[0]:.4e}\n")
        f.write(f"Slope:     {model.params[1]:.6f}, p-value: {model.pvalues[1]:.4e}\n\n")

        # 3. ARIMA Forecasts vs. FedFormer Forecasts
        X = sm.add_constant(pred_data)
        y = ar1_theoretical
        model = sm.OLS(y, X).fit()

        f.write("3. Optimal ARIMA Forecasts vs. FedFormer Forecasts\n")
        f.write(f"R-squared: {model.rsquared:.4f}\n")
        f.write(f"Intercept: {model.params[0]:.6f}, p-value: {model.pvalues[0]:.4e}\n")
        f.write(f"Slope:     {model.params[1]:.6f}, p-value: {model.pvalues[1]:.4e}\n\n")


    # Assuming true_data_compare and pred_data are NumPy arrays of the same size
    X = sm.add_constant(pred_data)  # Adding intercept term
    y = true_data_compare

    # Fit Ordinary Least Squares (OLS) regression
    model = sm.OLS(y, X).fit()
    print("Actual Data v. FedFormer Forecasts")
    print(model.summary())

    # Assuming true_data_compare and pred_data are NumPy arrays of the same size
    X = sm.add_constant(ar1_theoretical)  # Adding intercept term
    y = true_data_compare

    # Fit Ordinary Least Squares (OLS) regression
    model = sm.OLS(y, X).fit()
    print("Actual Data v. Optimal ARIMA Forecasts")
    print(model.summary())

    # Assuming true_data_compare and pred_data are NumPy arrays of the same size
    X = sm.add_constant(pred_data)  # Adding intercept term
    y = ar1_theoretical

    # Fit Ordinary Least Squares (OLS) regression
    model = sm.OLS(y, X).fit()
    print("Optimal ARIMA Forecasts v. FedFormer Forecasts")
    print(model.summary())


    print("------------------------------------------------------------Plots of Data-----------------------------------------------")


    filepath_plots_of_data = filepath + 'plots_of_data.png'

    # Plot the comparison
    plt.figure(figsize=(10, 5))
    plt.plot(true_data_compare, label='Actual Data', linestyle='dashed')
    plt.plot(pred_data, label='FedFormer Forecasts', alpha=0.7)
    plt.plot(ar1_theoretical, label='Optimal ARIMA Forecasts')
    plt.xlabel('Time Steps')
    plt.ylabel('Value')
    plt.title('Comparison of Actual Data, FedFormer Forecasts, and Optimal ARIMA Forecasts')
    plt.legend()
    plt.savefig(filepath_plots_of_data, dpi=300)
    plt.show()

def ar2_true_v_fed_plot(phi1, phi2, sigma, n, seed, modes, seq_len, label_len, pred_len, e_layers, d_layers, factor,
    enc_in, dec_in, c_out, d_model, train_epochs, seed_fedformer, old_name, new_name):

    import numpy as np
    import scipy.stats as stats

    filepath = f'ar2_{phi1}_{phi2}_{sigma}_{n}_{seed}_folder/ar2_{modes}_{seq_len}_{label_len}_{pred_len}_{e_layers}_{d_layers}_{factor}_{enc_in}_{dec_in}_{c_out}_{d_model}_{train_epochs}_{seed_fedformer}_{old_name}_{new_name}/'

    pred_folder = (f'ar2_{phi1}_{phi2}_{sigma}_{n}_{seed}_folder/ar2_{modes}_{seq_len}_{label_len}_{pred_len}_{e_layers}_{d_layers}_{factor}_{enc_in}_{dec_in}_{c_out}_{d_model}_{train_epochs}_{seed_fedformer}_{old_name}_{new_name}/pred.npy')
    true_folder = f'ar2_{phi1}_{phi2}_{sigma}_{n}_{seed}_folder/ar2_{phi1}_{phi2}_{sigma}_{n}_{seed}_data.csv'

    print(f"------------------------------------------------------------Phi1 {phi1} Phi2 {phi2} Sigma {sigma} n {n} seed {seed}----------------------------------------------- ")

    # Load prediction and true data
    pred_data = np.load(pred_folder)
    pred_data = pred_data.reshape(-1)

    true_df = pd.read_csv(true_folder)
    true_data = true_df.iloc[:,0].values

    data_train = true_data[:int(n*(2/3))]
    data_train_to_scale = data_train[:int(n*(2/3)*0.7)]
    from sklearn.preprocessing import StandardScaler
    scaler = StandardScaler()
    scaler.fit(data_train_to_scale.reshape(-1,1))

    data_test = true_data[int(n*(2/3)):]

    print("len of test data should be 1000," , len(data_test))


    # Compute testing sample size
    testing_sample_size = integer_always_round_down((n * (1/3) * 0.2) // 32) * 32
    start_idx = int(n * (1/3) - n * (1/3) * 0.2)
    true_data_compare = data_test[start_idx: start_idx + testing_sample_size]

    pred_data = scaler.inverse_transform(pred_data.reshape(-1,1))

    ar2_theoretical = get_ar2_forecasts(data_test, start_idx, testing_sample_size, phi1, phi2)
    df = pd.DataFrame(ar2_theoretical)
    df.to_csv(f'ar2_{phi1}_{phi2}_{sigma}_{n}_{seed}_folder/ar2_{modes}_{seq_len}_{label_len}_{pred_len}_{e_layers}_{d_layers}_{factor}_{enc_in}_{dec_in}_{c_out}_{d_model}_{train_epochs}_{seed_fedformer}_{old_name}_{new_name}/ar2_theoretical' + ".csv", index=False)

    true_data_compare = true_data_compare.reshape(-1)
    ar2_theoretical = ar2_theoretical.reshape(-1)
    pred_data = pred_data.reshape(-1)

    print("------------------------------------------------------------MSE Analysis----------------------------------------------- ")


    mse_real_v_fed = mean_squared_error(true_data_compare, pred_data)
    errors = true_data_compare - pred_data
    squared_errors = errors ** 2
    mse_check = np.mean(squared_errors)
    mse_real_v_theoretical = mean_squared_error(true_data_compare, ar2_theoretical)
    mse_ratio = mse_real_v_theoretical/mse_real_v_fed

    print(f"Mean Squared Error of Fedformer Forecasts: {mse_real_v_fed:.6f}")
    print(f"Mean Squared Error of Fedformer Forecasts (Check should be the same): {mse_check:.6f}")
    print(f"Mean Squared Error of Optimal ARIMA Forecasts: {mse_real_v_theoretical:.6f}")
    print(f"Ratio of Mean Squared Error of Optimal ARIMA Forecasts to Mean Squared Error of FedFormer Forecasts: {mse_real_v_theoretical/mse_real_v_fed}")

    filepath_mse = filepath + 'mse.txt'

    # Writing results to file
    with open(filepath_mse, "w") as f:
        f.write(f"Mean Squared Error of Fedformer Forecasts: {mse_real_v_fed:.6f}\n")
        f.write(f"Mean Squared Error of Fedformer Forecasts (Check should be the same): {mse_check:.6f}\n")
        f.write(f"Mean Squared Error of Optimal ARIMA Forecasts: {mse_real_v_theoretical:.6f}\n")
        f.write(f"Ratio of Mean Squared Error of Optimal ARIMA Forecasts to FedFormer Forecasts: {mse_ratio:.6f}\n")

    print("------------------------------------------------------------Ljung Box----------------------------------------------- ")

    filepath_ljung_box = filepath + 'ljung_box.txt'

    print("Ljung Box: FedFormer Forecast Errors")
    error_true_fed = true_data_compare - pred_data
    ljung_box_fed = sm.stats.acorr_ljungbox(error_true_fed, lags=10)
    print(ljung_box_fed)

    print("Ljung Box: ARIMA Forecast Errors")
    error_true_theoretical = true_data_compare - ar2_theoretical
    ljung_box_arima = sm.stats.acorr_ljungbox(error_true_theoretical, lags=10)
    print(ljung_box_arima)

    # --- Save 10th lag values to file ---
    with open(filepath_ljung_box, 'w') as f:
      f.write("Ljung-Box Test Results (10th Lag)\n")
      f.write("------------------------------------------------\n")
      f.write("FedFormer:\n")
      f.write(f"LB Stat: {ljung_box_fed['lb_stat'].iloc[-1]:.4f}, p-value: {ljung_box_fed['lb_pvalue'].iloc[-1]:.4f}\n")
      f.write("ARIMA:\n")
      f.write(f"LB Stat: {ljung_box_arima['lb_stat'].iloc[-1]:.4f}, p-value: {ljung_box_arima['lb_pvalue'].iloc[-1]:.4f}\n")

    print("------------------------------------------------------------Box Plots + Error Distribution-----------------------------------------------")

    filepath_box_plots_error_distribution = filepath + 'box_plots_error_distribution.png'


    # Prepare the DataFrame
    data = pd.DataFrame({
        'Error Type': ['FedFormer'] * len(error_true_fed) + ['ARIMA'] * len(error_true_theoretical),
        'Error Value': np.concatenate([error_true_fed, error_true_theoretical])
    })

    # Create side-by-side subplots
    fig, axes = plt.subplots(1, 2, figsize=(14, 5))

    # --- Boxplot ---
    sns.boxplot(x='Error Type', y='Error Value', data=data, palette='Set2', ax=axes[0])
    axes[0].set_title('Boxplots of Forecast Errors')
    axes[0].set_xlabel('Model')
    axes[0].set_ylabel('Error')
    axes[0].grid(True)

    # --- KDE Plot ---
    sns.kdeplot(error_true_fed, label="FedFormer", fill=True, ax=axes[1])
    sns.kdeplot(error_true_theoretical, label="ARIMA", fill=True, ax=axes[1])
    axes[1].set_title("Error Distribution Comparison")
    axes[1].set_xlabel("Error Value")
    axes[1].set_ylabel("Density")
    axes[1].legend()
    axes[1].grid(True)
    plt.tight_layout()
    plt.savefig(filepath_box_plots_error_distribution, dpi=300)
    plt.show()

    print("------------------------------------------------------------Error Distribution of Differences between Absolute and Squared Errors for FedFormer and Optimal ARIMA-----------------------------------------------")


    import numpy as np
    from scipy import stats

    filepath_box_plots_error_distribution_of_differences = filepath + 'box_plots_error_distribution_of_differences.png'

    # Calculate differences
    abs_diff = np.abs(error_true_fed) - np.abs(error_true_theoretical)
    squared_diff = (error_true_fed)**2 - (error_true_theoretical)**2

    # Create DataFrames for plotting
    abs_diff_df = pd.DataFrame({
        'Error Value': abs_diff,
        'Error Type': ['FedFormer - ARIMA'] * len(abs_diff)
    })

    squared_diff_df = pd.DataFrame({
        'Error Value': squared_diff,
        'Error Type': ['FedFormer - ARIMA'] * len(squared_diff)
    })

    # Create 2x2 plot grid
    fig, axes = plt.subplots(2, 2, figsize=(14, 10))

    # --- Top Left: Boxplot of Absolute Error Differences ---
    sns.boxplot(x='Error Type', y='Error Value', data=abs_diff_df, palette='Set2', ax=axes[0, 0])
    axes[0, 0].set_title('Boxplot: |FedFormer| - |ARIMA|')
    axes[0, 0].set_xlabel('Model Comparison')
    axes[0, 0].set_ylabel('Error Difference')
    axes[0, 0].grid(True)

    # --- Top Right: KDE of Absolute Error Differences ---
    sns.kdeplot(abs_diff, label="Absolute Error Difference", fill=True, ax=axes[0, 1])
    axes[0, 1].set_title('Distribution: |FedFormer| - |ARIMA|')
    axes[0, 1].set_xlabel('Error Difference')
    axes[0, 1].set_ylabel('Density')
    axes[0, 1].legend()
    axes[0, 1].grid(True)

    # --- Bottom Left: Boxplot of Squared Error Differences ---
    sns.boxplot(x='Error Type', y='Error Value', data=squared_diff_df, palette='Set2', ax=axes[1, 0])
    axes[1, 0].set_title('Boxplot: FedFormer² - ARIMA²')
    axes[1, 0].set_xlabel('Model Comparison')
    axes[1, 0].set_ylabel('Error Difference')
    axes[1, 0].grid(True)

    # --- Bottom Right: KDE of Squared Error Differences ---
    sns.kdeplot(squared_diff, label="Squared Error Difference", fill=True, ax=axes[1, 1])
    axes[1, 1].set_title('Distribution: FedFormer² - ARIMA²')
    axes[1, 1].set_xlabel('Error Difference')
    axes[1, 1].set_ylabel('Density')
    axes[1, 1].legend()
    axes[1, 1].grid(True)

    # Tidy layout and show
    plt.tight_layout()
    plt.savefig(filepath_box_plots_error_distribution_of_differences, dpi=300)
    plt.show()

    print("------------------------------------------------------------Hypothesis Tests-----------------------------------------------")


    filepath_hypothesis_tests = filepath + 'hypothesis_tests.txt'

    print(f"Mean of Difference Between Absolute Fedformer Forecasts Errors and Absolute Optimal ARIMA Forecast Errors: {np.mean(abs_diff)}")
    print(f'Standard Deviation of the Difference Between Absolute Fedformer Forecasts Errors and Absolute Optimal ARIMA Forecast Errors: {np.std(abs_diff)}')

    abs_t_stat, abs_p_value = stats.ttest_1samp(abs_diff, 0.0)
    print(f"\nt = {abs_t_stat:.4f},  p = {abs_p_value:.4f}")


    print(f"Mean of Difference Between Squared Fedformer Forecasts Errors and Squared Optimal ARIMA Forecast Errors: {np.mean(squared_diff)}")
    print(f'Standard Deviation of the Difference Between Squared Fedformer Forecasts Errors and Squared Optimal ARIMA Forecast Errors: {np.std(squared_diff)}')

    squared_t_stat, squared_p_value = stats.ttest_1samp(squared_diff, 0.0)
    print(f"\nt = {squared_t_stat:.4f},  p = {squared_p_value:.4f}")

    # Calculate stats
    abs_mean = np.mean(abs_diff)
    abs_std = np.std(abs_diff)
    abs_t_stat, abs_p_value = stats.ttest_1samp(abs_diff, 0.0)

    squared_mean = np.mean(squared_diff)
    squared_std = np.std(squared_diff)
    squared_t_stat, squared_p_value = stats.ttest_1samp(squared_diff, 0.0)

    # Write to file
    with open(filepath_hypothesis_tests, 'w') as f:
        f.write("Hypothesis Test Results: FedFormer vs Optimal ARIMA\n")
        f.write("====================================================\n\n")

        f.write("1. Absolute Error Difference (|FedFormer| - |ARIMA|)\n")
        f.write(f"Mean: {abs_mean:.6f}\n")
        f.write(f"Standard Deviation: {abs_std:.6f}\n")
        f.write(f"t-statistic: {abs_t_stat:.4f}\n")
        f.write(f"p-value: {abs_p_value:.4f}\n\n")

        f.write("2. Squared Error Difference (FedFormer² - ARIMA²)\n")
        f.write(f"Mean: {squared_mean:.6f}\n")
        f.write(f"Standard Deviation: {squared_std:.6f}\n")
        f.write(f"t-statistic: {squared_t_stat:.4f}\n")
        f.write(f"p-value: {squared_p_value:.4f}\n")

    print("------------------------------------------------------------ACF and PACF Plots-----------------------------------------------")

    filepath_acf_pacf_plots = filepath + 'acf_pacf_plots.png'

    # Set up subplots: 5 rows, 2 columns
    fig, axes = plt.subplots(5, 2, figsize=(12, 10))

    # Row 1: Actual Data
    plot_acf(true_data_compare, lags=20, ax=axes[0, 0], zero=False)
    axes[0, 0].set_title("ACF for Actual Data")
    plot_pacf(true_data_compare, lags=20, ax=axes[0, 1], zero=False)
    axes[0, 1].set_title("PACF for Actual Data")

    # Row 2: FedFormer Predictions
    plot_acf(pred_data, lags=20, ax=axes[1, 0], zero=False)
    axes[1, 0].set_title("ACF for FedFormer Predictions")
    plot_pacf(pred_data, lags=20, ax=axes[1, 1], zero=False)
    axes[1, 1].set_title("PACF for FedFormer Predictions")

    # Row 3: Optimal ARIMA Predictions
    plot_acf(ar2_theoretical, lags=20, ax=axes[2, 0], zero=False)
    axes[2, 0].set_title("ACF for ARIMA Predictions")
    plot_pacf(ar2_theoretical, lags=20, ax=axes[2, 1], zero=False)
    axes[2, 1].set_title("PACF for ARIMA Predictions")

    # Row 4: FedFormer Forecast Errors
    plot_acf(error_true_fed, lags=20, ax=axes[3, 0], zero=False)
    axes[3, 0].set_title("ACF of FedFormer Forecast Errors")
    plot_pacf(error_true_fed, lags=20, ax=axes[3, 1], zero=False)
    axes[3, 1].set_title("PACF of FedFormer Forecast Errors")

    # Row 5: ARIMA Forecast Errors
    plot_acf(error_true_theoretical, lags=20, ax=axes[4, 0], zero=False)
    axes[4, 0].set_title("ACF of ARIMA Forecast Errors")
    plot_pacf(error_true_theoretical, lags=20, ax=axes[4, 1], zero=False)
    axes[4, 1].set_title("PACF of ARIMA Forecast Errors")

    # Adjust layout and show the plot
    plt.tight_layout()
    plt.savefig(filepath_acf_pacf_plots, dpi=300)
    plt.show()

    print("------------------------------------------------------------Regression Analysis-----------------------------------------------")

    filepath_regression_summary = filepath + 'regression_summary.txt'

    with open(filepath_regression_summary, 'w') as f:
        f.write("Regression Summary: FedFormer and ARIMA Forecast Comparison\n")
        f.write("============================================================\n\n")

        # 1. Actual Data vs. FedFormer Forecasts
        X = sm.add_constant(pred_data)
        y = true_data_compare
        model = sm.OLS(y, X).fit()

        f.write("1. Actual Data vs. FedFormer Forecasts\n")
        f.write(f"R-squared: {model.rsquared:.4f}\n")
        f.write(f"Intercept: {model.params[0]:.6f}, p-value: {model.pvalues[0]:.4e}\n")
        f.write(f"Slope:     {model.params[1]:.6f}, p-value: {model.pvalues[1]:.4e}\n\n")

        # 2. Actual Data vs. ARIMA Forecasts
        X = sm.add_constant(ar2_theoretical)
        y = true_data_compare
        model = sm.OLS(y, X).fit()

        f.write("2. Actual Data vs. Optimal ARIMA Forecasts\n")
        f.write(f"R-squared: {model.rsquared:.4f}\n")
        f.write(f"Intercept: {model.params[0]:.6f}, p-value: {model.pvalues[0]:.4e}\n")
        f.write(f"Slope:     {model.params[1]:.6f}, p-value: {model.pvalues[1]:.4e}\n\n")

        # 3. ARIMA Forecasts vs. FedFormer Forecasts
        X = sm.add_constant(pred_data)
        y = ar2_theoretical
        model = sm.OLS(y, X).fit()

        f.write("3. Optimal ARIMA Forecasts vs. FedFormer Forecasts\n")
        f.write(f"R-squared: {model.rsquared:.4f}\n")
        f.write(f"Intercept: {model.params[0]:.6f}, p-value: {model.pvalues[0]:.4e}\n")
        f.write(f"Slope:     {model.params[1]:.6f}, p-value: {model.pvalues[1]:.4e}\n\n")


    # Assuming true_data_compare and pred_data are NumPy arrays of the same size
    X = sm.add_constant(pred_data)  # Adding intercept term
    y = true_data_compare

    # Fit Ordinary Least Squares (OLS) regression
    model = sm.OLS(y, X).fit()
    print("Actual Data v. FedFormer Forecasts")
    print(model.summary())

    # Assuming true_data_compare and pred_data are NumPy arrays of the same size
    X = sm.add_constant(ar2_theoretical)  # Adding intercept term
    y = true_data_compare

    # Fit Ordinary Least Squares (OLS) regression
    model = sm.OLS(y, X).fit()
    print("Actual Data v. Optimal ARIMA Forecasts")
    print(model.summary())

    # Assuming true_data_compare and pred_data are NumPy arrays of the same size
    X = sm.add_constant(pred_data)  # Adding intercept term
    y = ar2_theoretical

    # Fit Ordinary Least Squares (OLS) regression
    model = sm.OLS(y, X).fit()
    print("Optimal ARIMA Forecasts v. FedFormer Forecasts")
    print(model.summary())


    print("------------------------------------------------------------Plots of Data-----------------------------------------------")


    filepath_plots_of_data = filepath + 'plots_of_data.png'

    # Plot the comparison
    plt.figure(figsize=(10, 5))
    plt.plot(true_data_compare, label='Actual Data', linestyle='dashed')
    plt.plot(pred_data, label='FedFormer Forecasts', alpha=0.7)
    plt.plot(ar2_theoretical, label='Optimal ARIMA Forecasts')
    plt.xlabel('Time Steps')
    plt.ylabel('Value')
    plt.title('Comparison of Actual Data, FedFormer Forecasts, and Optimal ARIMA Forecasts')
    plt.legend()
    plt.savefig(filepath_plots_of_data, dpi=300)
    plt.show()


def white_noise_true_v_fed_plot(sigma, n, seed, modes, seq_len, label_len, pred_len, e_layers, d_layers, factor,
    enc_in, dec_in, c_out, d_model, train_epochs, seed_fedformer, old_name, new_name):

    import numpy as np
    from scipy import stats

    filepath = f'white_noise_{sigma}_{n}_{seed}_folder/white_noise_{modes}_{seq_len}_{label_len}_{pred_len}_{e_layers}_{d_layers}_{factor}_{enc_in}_{dec_in}_{c_out}_{d_model}_{train_epochs}_{seed_fedformer}_{old_name}_{new_name}/'

    pred_folder = (f'white_noise_{sigma}_{n}_{seed}_folder/white_noise_{modes}_{seq_len}_{label_len}_{pred_len}_{e_layers}_{d_layers}_{factor}_{enc_in}_{dec_in}_{c_out}_{d_model}_{train_epochs}_{seed_fedformer}_{old_name}_{new_name}/pred.npy')
    true_folder = f'white_noise_{sigma}_{n}_{seed}_folder/white_noise_{sigma}_{n}_{seed}_data.csv'

    print(f"------------------------------------------------------------Sigma {sigma} n {n} Seed {seed}----------------------------------------------- ")

    # Load prediction and true data
    pred_data = np.load(pred_folder)
    pred_data = pred_data.reshape(-1)

    true_df = pd.read_csv(true_folder)
    true_data = true_df.iloc[:,0].values

    data_train = true_data[:int(n*(2/3))]
    data_train_to_scale = data_train[:int(n*(2/3)*0.7)]
    from sklearn.preprocessing import StandardScaler
    scaler = StandardScaler()
    scaler.fit(data_train_to_scale.reshape(-1,1))

    data_test = true_data[int(n*(2/3)):]

    print("len of test data should be 1000," , len(data_test))

    # Compute testing sample size
    testing_sample_size = integer_always_round_down((n * (1/3) * 0.2) // 32) * 32
    start_idx = int(n * (1/3) - n * (1/3) * 0.2)
    true_data_compare = data_test[start_idx: start_idx + testing_sample_size]

    pred_data = scaler.inverse_transform(pred_data.reshape(-1,1))

    white_noise_theoretical = get_white_noise_forecasts(data_test, start_idx, testing_sample_size, sigma)
    df = pd.DataFrame(white_noise_theoretical)
    df.to_csv(f'white_noise_{sigma}_{n}_{seed}_folder/white_noise_{modes}_{seq_len}_{label_len}_{pred_len}_{e_layers}_{d_layers}_{factor}_{enc_in}_{dec_in}_{c_out}_{d_model}_{train_epochs}_{seed_fedformer}_{old_name}_{new_name}/white_noise_theoretical' + ".csv", index=False)

    true_data_compare = true_data_compare.reshape(-1)
    white_noise_theoretical = white_noise_theoretical.reshape(-1)
    pred_data = pred_data.reshape(-1)
    print("------------------------------------------------------------MSE Analysis----------------------------------------------- ")

    mse_real_v_fed = mean_squared_error(true_data_compare, pred_data)
    errors = true_data_compare - pred_data
    squared_errors = errors ** 2
    mse_check = np.mean(squared_errors)
    mse_real_v_theoretical = mean_squared_error(true_data_compare, white_noise_theoretical)
    mse_ratio = mse_real_v_theoretical/mse_real_v_fed

    print(f"Mean Squared Error of Fedformer Forecasts: {mse_real_v_fed:.6f}")
    print(f"Mean Squared Error of Fedformer Forecasts (Check should be the same): {mse_check:.6f}")
    print(f"Mean Squared Error of Optimal ARIMA Forecasts: {mse_real_v_theoretical:.6f}")
    print(f"Ratio of Mean Squared Error of Optimal ARIMA Forecasts to Mean Squared Error of FedFormer Forecasts: {mse_real_v_theoretical/mse_real_v_fed}")

    filepath_mse = filepath + 'mse.txt'

    # Writing results to file
    with open(filepath_mse, "w") as f:
        f.write(f"Mean Squared Error of Fedformer Forecasts: {mse_real_v_fed:.6f}\n")
        f.write(f"Mean Squared Error of Fedformer Forecasts (Check should be the same): {mse_check:.6f}\n")
        f.write(f"Mean Squared Error of Optimal ARIMA Forecasts: {mse_real_v_theoretical:.6f}\n")
        f.write(f"Ratio of Mean Squared Error of Optimal ARIMA Forecasts to FedFormer Forecasts: {mse_ratio:.6f}\n")

    print("------------------------------------------------------------Ljung Box----------------------------------------------- ")

    filepath_ljung_box = filepath + 'ljung_box.txt'

    print("Ljung Box: FedFormer Forecast Errors")
    error_true_fed = true_data_compare - pred_data
    ljung_box_fed = sm.stats.acorr_ljungbox(error_true_fed, lags=10)
    print(ljung_box_fed)

    print("Ljung Box: ARIMA Forecast Errors")
    error_true_theoretical = true_data_compare - white_noise_theoretical
    ljung_box_arima = sm.stats.acorr_ljungbox(error_true_theoretical, lags=10)
    print(ljung_box_arima)

    # --- Save 10th lag values to file ---
    with open(filepath_ljung_box, 'w') as f:
      f.write("Ljung-Box Test Results (10th Lag)\n")
      f.write("------------------------------------------------\n")
      f.write("FedFormer:\n")
      f.write(f"LB Stat: {ljung_box_fed['lb_stat'].iloc[-1]:.4f}, p-value: {ljung_box_fed['lb_pvalue'].iloc[-1]:.4f}\n")
      f.write("ARIMA:\n")
      f.write(f"LB Stat: {ljung_box_arima['lb_stat'].iloc[-1]:.4f}, p-value: {ljung_box_arima['lb_pvalue'].iloc[-1]:.4f}\n")

    print("------------------------------------------------------------Box Plots + Error Distribution-----------------------------------------------")

    filepath_box_plots_error_distribution = filepath + 'box_plots_error_distribution.png'


    # Prepare the DataFrame
    data = pd.DataFrame({
        'Error Type': ['FedFormer'] * len(error_true_fed) + ['ARIMA'] * len(error_true_theoretical),
        'Error Value': np.concatenate([error_true_fed, error_true_theoretical])
    })

    # Create side-by-side subplots
    fig, axes = plt.subplots(1, 2, figsize=(14, 5))

    # --- Boxplot ---
    sns.boxplot(x='Error Type', y='Error Value', data=data, palette='Set2', ax=axes[0])
    axes[0].set_title('Boxplots of Forecast Errors')
    axes[0].set_xlabel('Model')
    axes[0].set_ylabel('Error')
    axes[0].grid(True)

    # --- KDE Plot ---
    sns.kdeplot(error_true_fed, label="FedFormer", fill=True, ax=axes[1])
    sns.kdeplot(error_true_theoretical, label="ARIMA", fill=True, ax=axes[1])
    axes[1].set_title("Error Distribution Comparison")
    axes[1].set_xlabel("Error Value")
    axes[1].set_ylabel("Density")
    axes[1].legend()
    axes[1].grid(True)
    plt.tight_layout()
    plt.savefig(filepath_box_plots_error_distribution, dpi=300)
    plt.show()

    print("------------------------------------------------------------Error Distribution of Differences between Absolute and Squared Errors for FedFormer and Optimal ARIMA-----------------------------------------------")


    import numpy as np
    from scipy import stats

    filepath_box_plots_error_distribution_of_differences = filepath + 'box_plots_error_distribution_of_differences.png'

    # Calculate differences
    abs_diff = np.abs(error_true_fed) - np.abs(error_true_theoretical)
    squared_diff = (error_true_fed)**2 - (error_true_theoretical)**2

    # Create DataFrames for plotting
    abs_diff_df = pd.DataFrame({
        'Error Value': abs_diff,
        'Error Type': ['FedFormer - ARIMA'] * len(abs_diff)
    })

    squared_diff_df = pd.DataFrame({
        'Error Value': squared_diff,
        'Error Type': ['FedFormer - ARIMA'] * len(squared_diff)
    })

    # Create 2x2 plot grid
    fig, axes = plt.subplots(2, 2, figsize=(14, 10))

    # --- Top Left: Boxplot of Absolute Error Differences ---
    sns.boxplot(x='Error Type', y='Error Value', data=abs_diff_df, palette='Set2', ax=axes[0, 0])
    axes[0, 0].set_title('Boxplot: |FedFormer| - |ARIMA|')
    axes[0, 0].set_xlabel('Model Comparison')
    axes[0, 0].set_ylabel('Error Difference')
    axes[0, 0].grid(True)

    # --- Top Right: KDE of Absolute Error Differences ---
    sns.kdeplot(abs_diff, label="Absolute Error Difference", fill=True, ax=axes[0, 1])
    axes[0, 1].set_title('Distribution: |FedFormer| - |ARIMA|')
    axes[0, 1].set_xlabel('Error Difference')
    axes[0, 1].set_ylabel('Density')
    axes[0, 1].legend()
    axes[0, 1].grid(True)

    # --- Bottom Left: Boxplot of Squared Error Differences ---
    sns.boxplot(x='Error Type', y='Error Value', data=squared_diff_df, palette='Set2', ax=axes[1, 0])
    axes[1, 0].set_title('Boxplot: FedFormer² - ARIMA²')
    axes[1, 0].set_xlabel('Model Comparison')
    axes[1, 0].set_ylabel('Error Difference')
    axes[1, 0].grid(True)

    # --- Bottom Right: KDE of Squared Error Differences ---
    sns.kdeplot(squared_diff, label="Squared Error Difference", fill=True, ax=axes[1, 1])
    axes[1, 1].set_title('Distribution: FedFormer² - ARIMA²')
    axes[1, 1].set_xlabel('Error Difference')
    axes[1, 1].set_ylabel('Density')
    axes[1, 1].legend()
    axes[1, 1].grid(True)

    # Tidy layout and show
    plt.tight_layout()
    plt.savefig(filepath_box_plots_error_distribution_of_differences, dpi=300)
    plt.show()

    print("------------------------------------------------------------Hypothesis Tests-----------------------------------------------")


    filepath_hypothesis_tests = filepath + 'hypothesis_tests.txt'

    print(f"Mean of Difference Between Absolute Fedformer Forecasts Errors and Absolute Optimal ARIMA Forecast Errors: {np.mean(abs_diff)}")
    print(f'Standard Deviation of the Difference Between Absolute Fedformer Forecasts Errors and Absolute Optimal ARIMA Forecast Errors: {np.std(abs_diff)}')

    abs_t_stat, abs_p_value = stats.ttest_1samp(abs_diff, 0.0)
    print(f"\nt = {abs_t_stat:.4f},  p = {abs_p_value:.4f}")


    print(f"Mean of Difference Between Squared Fedformer Forecasts Errors and Squared Optimal ARIMA Forecast Errors: {np.mean(squared_diff)}")
    print(f'Standard Deviation of the Difference Between Squared Fedformer Forecasts Errors and Squared Optimal ARIMA Forecast Errors: {np.std(squared_diff)}')

    squared_t_stat, squared_p_value = stats.ttest_1samp(squared_diff, 0.0)
    print(f"\nt = {squared_t_stat:.4f},  p = {squared_p_value:.4f}")

    # Calculate stats
    abs_mean = np.mean(abs_diff)
    abs_std = np.std(abs_diff)
    abs_t_stat, abs_p_value = stats.ttest_1samp(abs_diff, 0.0)

    squared_mean = np.mean(squared_diff)
    squared_std = np.std(squared_diff)
    squared_t_stat, squared_p_value = stats.ttest_1samp(squared_diff, 0.0)

    # Write to file
    with open(filepath_hypothesis_tests, 'w') as f:
        f.write("Hypothesis Test Results: FedFormer vs Optimal ARIMA\n")
        f.write("====================================================\n\n")

        f.write("1. Absolute Error Difference (|FedFormer| - |ARIMA|)\n")
        f.write(f"Mean: {abs_mean:.6f}\n")
        f.write(f"Standard Deviation: {abs_std:.6f}\n")
        f.write(f"t-statistic: {abs_t_stat:.4f}\n")
        f.write(f"p-value: {abs_p_value:.4f}\n\n")

        f.write("2. Squared Error Difference (FedFormer² - ARIMA²)\n")
        f.write(f"Mean: {squared_mean:.6f}\n")
        f.write(f"Standard Deviation: {squared_std:.6f}\n")
        f.write(f"t-statistic: {squared_t_stat:.4f}\n")
        f.write(f"p-value: {squared_p_value:.4f}\n")

    print("------------------------------------------------------------ACF and PACF Plots-----------------------------------------------")

    filepath_acf_pacf_plots = filepath + 'acf_pacf_plots.png'

    # Set up subplots: 5 rows, 2 columns
    fig, axes = plt.subplots(5, 2, figsize=(12, 10))

    # Row 1: Actual Data
    plot_acf(true_data_compare, lags=20, ax=axes[0, 0], zero=False)
    axes[0, 0].set_title("ACF for Actual Data")
    plot_pacf(true_data_compare, lags=20, ax=axes[0, 1], zero=False)
    axes[0, 1].set_title("PACF for Actual Data")

    # Row 2: FedFormer Predictions
    plot_acf(pred_data, lags=20, ax=axes[1, 0], zero=False)
    axes[1, 0].set_title("ACF for FedFormer Predictions")
    plot_pacf(pred_data, lags=20, ax=axes[1, 1], zero=False)
    axes[1, 1].set_title("PACF for FedFormer Predictions")

    # Row 3: Optimal ARIMA Predictions
    plot_acf(white_noise_theoretical, lags=20, ax=axes[2, 0], zero=False)
    axes[2, 0].set_title("ACF for ARIMA Predictions")
    plot_pacf(white_noise_theoretical, lags=20, ax=axes[2, 1], zero=False)
    axes[2, 1].set_title("PACF for ARIMA Predictions")

    # Row 4: FedFormer Forecast Errors
    plot_acf(error_true_fed, lags=20, ax=axes[3, 0], zero=False)
    axes[3, 0].set_title("ACF of FedFormer Forecast Errors")
    plot_pacf(error_true_fed, lags=20, ax=axes[3, 1], zero=False)
    axes[3, 1].set_title("PACF of FedFormer Forecast Errors")

    # Row 5: ARIMA Forecast Errors
    plot_acf(error_true_theoretical, lags=20, ax=axes[4, 0], zero=False)
    axes[4, 0].set_title("ACF of ARIMA Forecast Errors")
    plot_pacf(error_true_theoretical, lags=20, ax=axes[4, 1], zero=False)
    axes[4, 1].set_title("PACF of ARIMA Forecast Errors")

    # Adjust layout and show the plot
    plt.tight_layout()
    plt.savefig(filepath_acf_pacf_plots, dpi=300)
    plt.show()

    print("------------------------------------------------------------Regression Analysis-----------------------------------------------")

    filepath_regression_summary = filepath + 'regression_summary.txt'

    with open(filepath_regression_summary, 'w') as f:
        f.write("Regression Summary: FedFormer and ARIMA Forecast Comparison\n")
        f.write("============================================================\n\n")

        # 1. Actual Data vs. FedFormer Forecasts
        X = sm.add_constant(pred_data)
        y = true_data_compare
        model = sm.OLS(y, X).fit()

        f.write("1. Actual Data vs. FedFormer Forecasts\n")
        f.write(f"R-squared: {model.rsquared:.4f}\n")
        f.write(f"Intercept: {model.params[0]:.6f}, p-value: {model.pvalues[0]:.4e}\n")
        f.write(f"Slope:     {model.params[1]:.6f}, p-value: {model.pvalues[1]:.4e}\n\n")

        # 2. Actual Data vs. ARIMA Forecasts
        X = sm.add_constant(white_noise_theoretical)
        y = true_data_compare
        model = sm.OLS(y, X).fit()

        f.write("2. Actual Data vs. Optimal ARIMA Forecasts\n")
        f.write(f"R-squared: {model.rsquared:.4f}\n")
        f.write(f"Intercept: {model.params[0]:.6f}, p-value: {model.pvalues[0]:.4e}\n")
        f.write(f"Slope:     {model.params[1]:.6f}, p-value: {model.pvalues[1]:.4e}\n\n")

        # 3. ARIMA Forecasts vs. FedFormer Forecasts
        X = sm.add_constant(pred_data)
        y = white_noise_theoretical
        model = sm.OLS(y, X).fit()

        f.write("3. Optimal ARIMA Forecasts vs. FedFormer Forecasts\n")
        f.write(f"R-squared: {model.rsquared:.4f}\n")
        f.write(f"Intercept: {model.params[0]:.6f}, p-value: {model.pvalues[0]:.4e}\n")
        f.write(f"Slope:     {model.params[1]:.6f}, p-value: {model.pvalues[1]:.4e}\n\n")


    # Assuming true_data_compare and pred_data are NumPy arrays of the same size
    X = sm.add_constant(pred_data)  # Adding intercept term
    y = true_data_compare

    # Fit Ordinary Least Squares (OLS) regression
    model = sm.OLS(y, X).fit()
    print("Actual Data v. FedFormer Forecasts")
    print(model.summary())

    # Assuming true_data_compare and pred_data are NumPy arrays of the same size
    X = sm.add_constant(white_noise_theoretical)  # Adding intercept term
    y = true_data_compare

    # Fit Ordinary Least Squares (OLS) regression
    model = sm.OLS(y, X).fit()
    print("Actual Data v. Optimal ARIMA Forecasts")
    print(model.summary())

    # Assuming true_data_compare and pred_data are NumPy arrays of the same size
    X = sm.add_constant(pred_data)  # Adding intercept term
    y = white_noise_theoretical

    # Fit Ordinary Least Squares (OLS) regression
    model = sm.OLS(y, X).fit()
    print("Optimal ARIMA Forecasts v. FedFormer Forecasts")
    print(model.summary())


    print("------------------------------------------------------------Plots of Data-----------------------------------------------")


    filepath_plots_of_data = filepath + 'plots_of_data.png'

    # Plot the comparison
    plt.figure(figsize=(10, 5))
    plt.plot(true_data_compare, label='Actual Data', linestyle='dashed')
    plt.plot(pred_data, label='FedFormer Forecasts', alpha=0.7)
    plt.plot(white_noise_theoretical, label='Optimal ARIMA Forecasts')
    plt.xlabel('Time Steps')
    plt.ylabel('Value')
    plt.title('Comparison of Actual Data, FedFormer Forecasts, and Optimal ARIMA Forecasts')
    plt.legend()
    plt.savefig(filepath_plots_of_data, dpi=300)
    plt.show()

# PARAMETERS USED
modes = 64
seq_len = 96
label_len = 0
pred_len = 1
e_layers = 2
d_layers = 1
factor = 3
enc_in = 1
dec_in = 1
c_out = 1
d_model = 128
train_epochs = 1
seed_fedformer = 42

n = 3000
seed = 52
old_name = 'train'
new_name = 'test'

from google.colab import drive
drive.mount('/content/drive')
original_dir = os.getcwd()

"""AR(1)"""

zip_path = "/content/drive/My Drive/Honors Thesis /Spring_File/New/Final Files/Files/Original Parameters/ar1_variance_check_og_params_folders.zip"
import zipfile

extract_path = "AR1_OG"  # You can rename this if you like

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)

print("✅ Unzipped to:", extract_path)

# Change to the folder where all the subfolders live
os.chdir("AR1_OG")

for phi in [-0.3,-0.7,0.3,0.7]:
  for sigma in [1]:
    ar1_true_v_fed_plot(phi, sigma, n, seed, modes, seq_len, label_len, pred_len, e_layers, d_layers, factor,
    enc_in, dec_in, c_out, d_model, train_epochs, seed_fedformer, old_name, new_name)


os.chdir(original_dir)

"""AR(2)"""

zip_path = "/content/drive/My Drive/Honors Thesis /Spring_File/New/Final Files/Files/Original Parameters/ar2_variance_check_og_params_folders (2).zip"
import zipfile

extract_path = "AR2_OG"  # You can rename this if you like

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)

print("✅ Unzipped to:", extract_path)

# Change to the folder where all the subfolders live
os.chdir("AR2_OG")

for phi1 in [-0.5,0.5]:
  for phi2 in [-0.4,0.4]:
    for sigma in [1]:
      ar2_true_v_fed_plot(phi1, phi2, sigma, n, seed, modes, seq_len, label_len, pred_len, e_layers, d_layers, factor,
      enc_in, dec_in, c_out, d_model, train_epochs, seed_fedformer, old_name, new_name)

os.chdir(original_dir)

"""White Noise"""

zip_path = "/content/drive/My Drive/Honors Thesis /Spring_File/New/Final Files/Files/Original Parameters/white_noise_variance_check_og_params_folders (2).zip"
import zipfile

original_dir = os.getcwd()

extract_path = "White_Noise_OG"  # You can rename this if you like

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)

print("✅ Unzipped to:", extract_path)

# Change to the folder where all the subfolders live
os.chdir("White_Noise_OG")

for sigma in [1]:
  white_noise_true_v_fed_plot(sigma, n, seed, modes, seq_len, label_len, pred_len, e_layers, d_layers, factor,
    enc_in, dec_in, c_out, d_model, train_epochs, seed_fedformer, old_name, new_name)

os.chdir(original_dir)

"""Seed"""

zip_path = "/content/drive/My Drive/Honors Thesis /Spring_File/New/Final Files/Files/Original Parameters/Seed/ar1_variance_check_og_params_seed_folders.zip"
import zipfile

extract_path = "AR1_Seed_OG"  # You can rename this if you like

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)

print("✅ Unzipped to:", extract_path)

# Change to the folder where all the subfolders live
os.chdir("AR1_Seed_OG")
for seed in [53,54,55,56,57]:
  for phi in [-0.3,-0.7,0.3,0.7]:
    for sigma in [1]:
          ar1_true_v_fed_plot(phi, sigma, n, seed, modes, seq_len, label_len, pred_len, e_layers, d_layers, factor,
          enc_in, dec_in, c_out, d_model, train_epochs, seed_fedformer, old_name, new_name)

os.chdir(original_dir)

zip_path = "/content/drive/My Drive/Honors Thesis /Spring_File/New/Final Files/Files/Original Parameters/Seed/ar2_variance_check_og_params_seed_folders.zip"
import zipfile


extract_path = "AR2_Seed_OG"  # You can rename this if you like

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)

print("✅ Unzipped to:", extract_path)

# Change to the folder where all the subfolders live
os.chdir("AR2_Seed_OG")


for seed in [53,54,55,56,57]:
  for phi1 in [-0.5,0.5]:
    for phi2 in [-0.4,0.4]:
      for sigma in [1]:
        ar2_true_v_fed_plot(phi1, phi2, sigma, n, seed, modes, seq_len, label_len, pred_len, e_layers, d_layers, factor,
        enc_in, dec_in, c_out, d_model, train_epochs, seed_fedformer, old_name, new_name)

os.chdir(original_dir)

zip_path = "/content/drive/My Drive/Honors Thesis /Spring_File/New/Final Files/Files/Original Parameters/Seed/white_noise_variance_check_og_params_seed_folders.zip"
import zipfile


extract_path = "White_Noise_Seed_OG"  # You can rename this if you like

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)

print("✅ Unzipped to:", extract_path)

# Change to the folder where all the subfolders live
os.chdir("White_Noise_Seed_OG")

for seed in [53,54,55,56,57]:
  for sigma in [1]:
    white_noise_true_v_fed_plot(sigma, n, seed, modes, seq_len, label_len, pred_len, e_layers, d_layers, factor,
    enc_in, dec_in, c_out, d_model, train_epochs, seed_fedformer, old_name, new_name)

os.chdir(original_dir)

"""FedFormer Seed"""

seed=52

zip_path = "/content/drive/My Drive/Honors Thesis /Spring_File/New/Final Files/Files/Original Parameters/FedFormer_Seed/ar1_variance_check_og_params_FedFormer_seed_folders.zip"
import zipfile

extract_path = "AR1_FedFormer_Seed_OG"  # You can rename this if you like

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)

print("✅ Unzipped to:", extract_path)

# Change to the folder where all the subfolders live
os.chdir("AR1_FedFormer_Seed_OG")
print(n)
for seed_fedformer in [43,44,45,46,47]:
  for phi in [-0.3,-0.7,0.3,0.7]:
    for sigma in [1]:
      ar1_true_v_fed_plot(phi, sigma, n, seed, modes, seq_len, label_len, pred_len, e_layers, d_layers, factor,
      enc_in, dec_in, c_out, d_model, train_epochs, seed_fedformer, old_name, new_name)

os.chdir(original_dir)

zip_path = "/content/drive/My Drive/Honors Thesis /Spring_File/New/Final Files/Files/Original Parameters/FedFormer_Seed/ar2_variance_check_og_params_fedformer_seed_folders.zip"
import zipfile

extract_path = "AR2_FedFormer_Seed_OG"  # You can rename this if you like

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)

print("✅ Unzipped to:", extract_path)

# Change to the folder where all the subfolders live
os.chdir("AR2_FedFormer_Seed_OG")
for seed_fedformer in [43,44,45,46,47]:
  for phi1 in [-0.5,0.5]:
    for phi2 in [-0.4,0.4]:
      for sigma in [1]:
        ar2_true_v_fed_plot(phi1, phi2, sigma, n, seed, modes, seq_len, label_len, pred_len, e_layers, d_layers, factor,
        enc_in, dec_in, c_out, d_model, train_epochs, seed_fedformer, old_name, new_name)

os.chdir(original_dir)

zip_path = "/content/drive/My Drive/Honors Thesis /Spring_File/New/Final Files/Files/Original Parameters/FedFormer_Seed/white_noise_variance_check_og_params_fedformer_seed_folders.zip"
import zipfile

extract_path = "White_Noise_FedFormer_Seed_OG"  # You can rename this if you like

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)

print("✅ Unzipped to:", extract_path)

# Change to the folder where all the subfolders live
os.chdir("White_Noise_FedFormer_Seed_OG")
for seed_fedformer in [43,44,45,46,47]:
  for sigma in [1]:
    white_noise_true_v_fed_plot(sigma, n, seed, modes, seq_len, label_len, pred_len, e_layers, d_layers, factor,
    enc_in, dec_in, c_out, d_model, train_epochs, seed_fedformer, old_name, new_name)

os.chdir(original_dir)

"""Epochs"""

seed_fedformer = 42

zip_path = "/content/drive/My Drive/Honors Thesis /Spring_File/New/Final Files/Files/Original Parameters/Epochs/ar1_variance_check_og_params_epoch_3_5_folders.zip"
import zipfile

extract_path = "AR1_Epoch_3_5_OG"  # You can rename this if you like

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)

print("✅ Unzipped to:", extract_path)

# Change to the folder where all the subfolders live
os.chdir("AR1_Epoch_3_5_OG")
for train_epochs in [3,5]:
  for phi in [-0.3,-0.7,0.3,0.7]:
    for sigma in [1]:
      ar1_true_v_fed_plot(phi, sigma, n, seed, modes, seq_len, label_len, pred_len, e_layers, d_layers, factor,
      enc_in, dec_in, c_out, d_model, train_epochs, seed_fedformer, old_name, new_name)

os.chdir(original_dir)

zip_path = "/content/drive/My Drive/Honors Thesis /Spring_File/New/Final Files/Files/Original Parameters/Epochs/ar1_variance_check_og_params_epoch_7_folders.zip"
import zipfile

extract_path = "AR1_Epoch_7_OG"  # You can rename this if you like

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)

print("✅ Unzipped to:", extract_path)

# Change to the folder where all the subfolders live
os.chdir("AR1_Epoch_7_OG")
for train_epochs in [7]:
  for phi in [-0.3,-0.7,0.3,0.7]:
    for sigma in [1]:
      ar1_true_v_fed_plot(phi, sigma, n, seed, modes, seq_len, label_len, pred_len, e_layers, d_layers, factor,
      enc_in, dec_in, c_out, d_model, train_epochs, seed_fedformer, old_name, new_name)

os.chdir(original_dir)

zip_path = "/content/drive/My Drive/Honors Thesis /Spring_File/New/Final Files/Files/Original Parameters/Epochs/ar1_variance_check_og_params_epoch_10_folders.zip"
import zipfile

extract_path = "AR1_Epoch_10_OG"  # You can rename this if you like

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)

print("✅ Unzipped to:", extract_path)

# Change to the folder where all the subfolders live
os.chdir("AR1_Epoch_10_OG")
for train_epochs in [10]:
  for phi in [-0.3,-0.7,0.3,0.7]:
    for sigma in [1]:
      ar1_true_v_fed_plot(phi, sigma, n, seed, modes, seq_len, label_len, pred_len, e_layers, d_layers, factor,
      enc_in, dec_in, c_out, d_model, train_epochs, seed_fedformer, old_name, new_name)

os.chdir(original_dir)

"""AR2"""

zip_path = "/content/drive/My Drive/Honors Thesis /Spring_File/New/Final Files/Files/Original Parameters/Epochs/ar2_variance_check_og_params_epoch_3_5_folders.zip"
import zipfile

extract_path = "AR2_Epoch_3_5_OG"  # You can rename this if you like

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)

print("✅ Unzipped to:", extract_path)

# Change to the folder where all the subfolders live
os.chdir("AR2_Epoch_3_5_OG")
for train_epochs in [3,5]:
  for phi1 in [-0.5,0.5]:
    for phi2 in [-0.4,0.4]:
      for sigma in [1]:
        ar2_true_v_fed_plot(phi1, phi2, sigma, n, seed, modes, seq_len, label_len, pred_len, e_layers, d_layers, factor,
        enc_in, dec_in, c_out, d_model, train_epochs, seed_fedformer, old_name, new_name)

os.chdir(original_dir)

zip_path = "/content/drive/My Drive/Honors Thesis /Spring_File/New/Final Files/Files/Original Parameters/Epochs/ar2_variance_check_og_params_epoch_7_folders.zip"
import zipfile

extract_path = "AR2_Epoch_7_OG"  # You can rename this if you like

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)

print("✅ Unzipped to:", extract_path)

# Change to the folder where all the subfolders live
os.chdir("AR2_Epoch_7_OG")
for train_epochs in [7]:
  for phi1 in [-0.5,0.5]:
    for phi2 in [-0.4,0.4]:
      for sigma in [1]:
        ar2_true_v_fed_plot(phi1, phi2, sigma, n, seed, modes, seq_len, label_len, pred_len, e_layers, d_layers, factor,
        enc_in, dec_in, c_out, d_model, train_epochs, seed_fedformer, old_name, new_name)

os.chdir(original_dir)

zip_path = "/content/drive/My Drive/Honors Thesis /Spring_File/New/Final Files/Files/Original Parameters/Epochs/ar2_variance_check_og_params_epoch_10_folders.zip"
import zipfile

extract_path = "AR2_Epoch_10_OG"  # You can rename this if you like

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)

print("✅ Unzipped to:", extract_path)

# Change to the folder where all the subfolders live
os.chdir("AR2_Epoch_10_OG")
for train_epochs in [10]:
  for phi1 in [-0.5,0.5]:
    for phi2 in [-0.4,0.4]:
      for sigma in [1]:
        ar2_true_v_fed_plot(phi1, phi2, sigma, n, seed, modes, seq_len, label_len, pred_len, e_layers, d_layers, factor,
        enc_in, dec_in, c_out, d_model, train_epochs, seed_fedformer, old_name, new_name)

os.chdir(original_dir)

"""White Noise"""

zip_path = "/content/drive/My Drive/Honors Thesis /Spring_File/New/Final Files/Files/Original Parameters/Epochs/white_noise_variance_check_og_params_epochs_folders.zip"
import zipfile

extract_path = "White_Noise_Epochs_OG"  # You can rename this if you like

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)

print("✅ Unzipped to:", extract_path)

# Change to the folder where all the subfolders live
os.chdir("White_Noise_Epochs_OG")
for train_epochs in [3,5,7,10]:
  for sigma in [1]:
    white_noise_true_v_fed_plot(sigma, n, seed, modes, seq_len, label_len, pred_len, e_layers, d_layers, factor,
    enc_in, dec_in, c_out, d_model, train_epochs, seed_fedformer, old_name, new_name)

os.chdir(original_dir)

"""# Epoch_6_d_model_256_4_Seeds_One_Realization"""

phi=0.5
sigma=1
# PARAMETERS USED
modes = 64
seq_len = 96
label_len = 0
pred_len = 1
e_layers = 2
d_layers = 1
factor = 3
enc_in = 1
dec_in = 1
c_out = 1
d_model = 256
train_epochs = 6
seed_fedformer = 42
old_name = 'train'
new_name = 'test'

n = 3000
seed = 52

zip_path = '/content/drive/My Drive/Honors Thesis /Spring_File/New/Final Files/Files/Original Parameters/Epoch_6_d_model_256_4_Seeds_One_Realization/ar1_variance_check_og_params_Epoch_6_d_model_256_4_Seeds_One_Realization_folders.zip'
import zipfile

extract_path = "AR1_Epoch_6_d_model_256_4_Seeds_One_Realization_OG"  # You can rename this if you like

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)

print("✅ Unzipped to:", extract_path)

# Change to the folder where all the subfolders live
os.chdir("AR1_Epoch_6_d_model_256_4_Seeds_One_Realization_OG")
for seed in [53,54,55,56]:
    ar1_true_v_fed_plot(phi, sigma, n, seed, modes, seq_len, label_len, pred_len, e_layers, d_layers, factor,
    enc_in, dec_in, c_out, d_model, train_epochs, seed_fedformer, old_name, new_name)

os.chdir(original_dir)

# EPOCHS CHANGED TO 3 and SEED and FEDFORMER SEED to 53
n = 3000

modes = 64
seq_len = 96
label_len = 0
pred_len = 1
e_layers = 2
d_layers = 1
factor = 3
enc_in = 1
dec_in = 1
c_out = 1
d_model = 256
train_epochs = 6
seed_fedformer = 42
old_name = 'train'
new_name = 'test'
phi1=0.4
phi2=0.4
sigma = 1

zip_path = '/content/drive/My Drive/Honors Thesis /Spring_File/New/Final Files/Files/Original Parameters/Epoch_6_d_model_256_4_Seeds_One_Realization/ar2_variance_check_og_params_Epoch_6_d_model_256_4_Seeds_One_Realization_folders.zip'
import zipfile

extract_path = "AR2_Epoch_6_d_model_256_4_Seeds_One_Realization_OG"  # You can rename this if you like

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)

print("✅ Unzipped to:", extract_path)

# Change to the folder where all the subfolders live
os.chdir("AR2_Epoch_6_d_model_256_4_Seeds_One_Realization_OG")
for seed in [53,54,55,56]:
      ar2_true_v_fed_plot(phi1, phi2, sigma, n, seed, modes, seq_len, label_len, pred_len, e_layers, d_layers, factor,
      enc_in, dec_in, c_out, d_model, train_epochs, seed_fedformer, old_name, new_name)

os.chdir(original_dir)

n = 3000

# PARAMETERS USED
modes = 64
seq_len = 96
label_len = 0
pred_len = 1
e_layers = 2
d_layers = 1
factor = 3
enc_in = 1
dec_in = 1
c_out = 1
d_model = 256
train_epochs = 6
seed_fedformer = 42
old_name = 'train'
new_name = 'test'
sigma = 1

zip_path = '/content/drive/My Drive/Honors Thesis /Spring_File/New/Final Files/Files/Original Parameters/Epoch_6_d_model_256_4_Seeds_One_Realization/white_noise_variance_check_og_params_Epoch_6_d_model_256_4_Seeds_One_Realization_folders.zip'
import zipfile

extract_path = "White_Noise_Epoch_6_d_model_256_4_Seeds_One_Realization_OG"  # You can rename this if you like

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)

print("✅ Unzipped to:", extract_path)

# Change to the folder where all the subfolders live
os.chdir("White_Noise_Epoch_6_d_model_256_4_Seeds_One_Realization_OG")
for seed in [53,54,55,56]:
  white_noise_true_v_fed_plot(sigma, n, seed, modes, seq_len, label_len, pred_len, e_layers, d_layers, factor,
    enc_in, dec_in, c_out, d_model, train_epochs, seed_fedformer, old_name, new_name)

os.chdir(original_dir)